Index: src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.client.planets;\r\n\r\nimport net.minecraft.util.Identifier;\r\nimport net.minecraft.util.math.Vec3d;\r\nimport org.copycraftDev.new_horizons.NewHorizonsMain;\r\nimport org.copycraftDev.new_horizons.extrastuff.PlanetTextureGenerator;\r\nimport org.copycraftDev.new_horizons.extrastuff.TextureResizer;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CelestialBodyRegistry {\r\n    private static final Map<Identifier, CelestialBodyData> REGISTERED_PLANETS = new HashMap<>();\r\n\r\n    static {\r\n        registerDefaults();\r\n    }\r\n\r\n\r\n    public static void reloadPlanets() {\r\n        REGISTERED_PLANETS.clear();\r\n        registerDefaults();\r\n        System.out.println(\"\uD83D\uDD04 Reloaded all planets\");\r\n    }\r\n\r\n\r\n    private static void registerDefaults() {\r\n        register(createSun());\r\n        register(createMercury());\r\n        register(createVenus());\r\n        register(createEarth());\r\n        register(createMars());\r\n        register(createJupiter());\r\n        register(createSaturn());\r\n        register(createUranus());\r\n        register(createNeptune());\r\n    }\r\n\r\n    private static CelestialBodyData createSun() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Sun\";\r\n        p.center = new Vec3d(0, 100, 0);\r\n        p.radius = 140;\r\n        p.rotationSpeed = 0.001;\r\n        p.orbitSpeed = 0.0;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = true;\r\n        p.atmosphereColor1 = null;\r\n        p.atmosphereColor2 = null;\r\n        p.atmosphereRadius = 10;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath = \"textures/test_textures/8k_sun.jpg\";\r\n        p.heightMapPath       = \"textures/test_textures/sun_height_map.png\";\r\n        p.normalMapPath       = \"textures/test_textures/sun_normal_map.png\";\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createMercury() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Mercury\";\r\n        p.center = new Vec3d(0, 100, -390);\r\n        p.radius = 50;\r\n        p.rotationSpeed = 0.001;\r\n        p.orbitSpeed = 0.004;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = false;\r\n        p.atmosphereColor1 = null;\r\n        p.atmosphereColor2 = null;\r\n        p.atmosphereRadius = 0;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = true;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_mercury.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/mercury_height_map.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/mercury_normal_map.jpg\";\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createVenus() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Venus\";\r\n        p.center = new Vec3d(10, 100, -720);\r\n        p.radius = 80;\r\n        p.rotationSpeed = 0.001;\r\n        p.orbitSpeed = 0.004;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = false;\r\n        p.atmosphereColor1 = null;\r\n        p.atmosphereColor2 = null;\r\n        p.atmosphereRadius = 0;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = true;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_venus_surface.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/venus_height_map.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/venus_normal_map.jpg\";\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createEarth() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Earth\";\r\n        p.center = new Vec3d(20, 100, -1000);\r\n        p.radius = 100;\r\n        p.rotationSpeed = 0.003;\r\n        p.orbitSpeed = 0.002;\r\n        p.hasAtmosphere = true;\r\n        p.isStar = false;\r\n        p.atmosphereColor1 = null;\r\n        p.atmosphereColor2 = null;\r\n        p.atmosphereRadius = 105;\r\n        p.hasDarkAlbedoMap = true;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath    = \"textures/test_textures/earth_texture.png\";\r\n        p.atmosphereTexturePath = \"textures/test_textures/8k_earth_clouds.jpg\";\r\n        p.darkAlbedoMapPath     = \"textures/test_textures/earth_night.png\";\r\n        p.heightMapPath         = \"textures/test_textures/earth_height.png\";\r\n        p.normalMapPath         = \"textures/test_textures/earth_normal.png\";\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createMars() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Mars\";\r\n        p.center = new Vec3d(30, 100, -1520);\r\n        p.radius = 80;\r\n        p.rotationSpeed = 0.001;\r\n        p.orbitSpeed = 0.004;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = false;\r\n        p.atmosphereColor1 = null;\r\n        p.atmosphereColor2 = null;\r\n        p.atmosphereRadius = 0;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = true;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_mars.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/mars_height.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/mars_normal.jpg\";\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createJupiter() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Jupiter\";\r\n        p.center = new Vec3d(40, 100, -5200);\r\n        p.radius = 110;\r\n        p.rotationSpeed = 0.001;\r\n        p.orbitSpeed = 0.004;\r\n        p.hasAtmosphere = true;\r\n        p.isStar = true;\r\n        p.atmosphereColor1 = null;\r\n        p.atmosphereColor2 = null;\r\n        p.atmosphereRadius = 115;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = true;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_jupiter.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/jupiter_height.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/jupitertest.jpg\";\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createSaturn() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Saturn\";\r\n        p.center = new Vec3d(50, 100, -9540);\r\n        p.radius = 110;\r\n        p.rotationSpeed = 0.001;\r\n        p.orbitSpeed = 0.004;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = true;\r\n        p.atmosphereColor1 = null;\r\n        p.atmosphereColor2 = null;\r\n        p.atmosphereRadius = 0;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = true;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_saturn.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/saturn_height_map.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/saturn_normal_map.jpg\";\r\n        p.ringsTexturePath      = \"textures/test_textures/saturn_ring.jpg\";\r\n        p.ringsInnerRadius      = 100;\r\n        p.ringsOuterRadius      = 100;\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createUranus() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Uranus\";\r\n        p.center = new Vec3d(50, 100, -19200);\r\n        p.radius = 120;\r\n        p.rotationSpeed = 0.001;\r\n        p.orbitSpeed = 0.004;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = true;\r\n        p.atmosphereColor1 = null;\r\n        p.atmosphereColor2 = null;\r\n        p.atmosphereRadius = 0;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = true;\r\n        p.surfaceTexturePath    = \"textures/test_textures/2k_uranus.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/earth_height.png\";\r\n        p.normalMapPath         = \"textures/test_textures/earth_normal.png\";\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createNeptune() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Neptune\";\r\n        p.center = new Vec3d(60, 100, -30006);\r\n        p.radius = 130;\r\n        p.rotationSpeed = 0.001;\r\n        p.orbitSpeed = 0.004;\r\n        p.hasAtmosphere = true;\r\n        p.isStar = true;\r\n        p.atmosphereColor1 = null;\r\n        p.atmosphereColor2 = null;\r\n        p.atmosphereRadius = 135;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = true;\r\n        p.surfaceTexturePath    = \"textures/test_textures/2k_neptune.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/neptune_height.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/neptune_normal.jpg\";\r\n\r\n        return p;\r\n    }\r\n\r\n    private static void register(CelestialBodyData planet) {\r\n        String key = planet.name.toLowerCase();\r\n\r\n        if (planet.usesGeneratedTexture) {\r\n            String genDir = \"assets/\" + NewHorizonsMain.MOD_ID + \"/textures/generated/\" + key;\r\n            File d = new File(genDir);\r\n            if (!d.exists() && !d.mkdirs()) {\r\n                System.err.println(\"Cannot create \" + genDir);\r\n            }\r\n            PlanetTextureGenerator gen = new PlanetTextureGenerator.Builder()\r\n                    .size(2048)\r\n                    .seed(123456L)\r\n                    .octaves(5)\r\n                    .frequency(3f)\r\n                    .build();\r\n            gen.generateAndRegister(NewHorizonsMain.MOD_ID, key);\r\n\r\n            planet.surfaceTexture = NewHorizonsMain.id(\"textures/generated/\" + key + \"/\" + key + \"_albedo.png\");\r\n            planet.heightMap      = NewHorizonsMain.id(\"textures/generated/\" + key + \"/\" + key + \"_height.png\");\r\n            planet.normalMap      = NewHorizonsMain.id(\"textures/generated/\" + key + \"/\" + key + \"_normal.png\");\r\n\r\n            planet.surfaceTexture = TextureResizer.resizeTexture(\r\n                    NewHorizonsMain.MOD_ID,\r\n                    \"textures/generated/\" + key + \"/\" + key + \"_albedo.png\",\r\n                    4096,2048, key + \"_alb_resized\", false\r\n            );\r\n            planet.heightMap = TextureResizer.resizeTexture(\r\n                    NewHorizonsMain.MOD_ID,\r\n                    \"textures/generated/\" + key + \"/\" + key + \"_height.png\",\r\n                    4096,2048, key + \"_hgt_resized\", false\r\n            );\r\n            planet.normalMap = TextureResizer.resizeTexture(\r\n                    NewHorizonsMain.MOD_ID,\r\n                    \"textures/generated/\" + key + \"/\" + key + \"_normal.png\",\r\n                    4096,2048, key + \"_nrm_resized\", false\r\n            );\r\n        } else {\r\n            planet.surfaceTexture    = planet.surfaceTexturePath    != null ? NewHorizonsMain.id(planet.surfaceTexturePath)    : null;\r\n            planet.cloudsTexture     = planet.cloudsTexturePath     != null ? NewHorizonsMain.id(planet.cloudsTexturePath)     : null;\r\n            planet.atmosphereTexture = planet.atmosphereTexturePath != null ? NewHorizonsMain.id(planet.atmosphereTexturePath) : null;\r\n            planet.darkAlbedoMap     = planet.darkAlbedoMapPath     != null ? NewHorizonsMain.id(planet.darkAlbedoMapPath)     : null;\r\n            planet.heightMap         = planet.heightMapPath         != null ? NewHorizonsMain.id(planet.heightMapPath)         : null;\r\n            planet.normalMap         = planet.normalMapPath         != null ? NewHorizonsMain.id(planet.normalMapPath)         : null;\r\n        }\r\n\r\n        // handle rings if present\r\n        if (planet.ringsTexturePath != null) {\r\n            planet.ringsTexture = NewHorizonsMain.id(planet.ringsTexturePath);\r\n        }\r\n\r\n        REGISTERED_PLANETS.put(NewHorizonsMain.id(key), planet);\r\n        System.out.println(\"✅ Registered planet \" + planet.name);\r\n    }\r\n\r\n    public static CelestialBodyData getPlanet(Identifier id) {\r\n        return REGISTERED_PLANETS.get(id);\r\n    }\r\n\r\n    public static Map<Identifier,CelestialBodyData> getAllPlanets() {\r\n        return REGISTERED_PLANETS;\r\n    }\r\n\r\n    public static double getOrbitAngle(CelestialBodyData data, double worldTime, double partialTick) {\r\n        return (worldTime + partialTick) * data.orbitSpeed;\r\n    }\r\n\r\n    public static float getRotationAngle(CelestialBodyData data, double worldTime, double partialTick) {\r\n        double angle = (worldTime + partialTick) * data.rotationSpeed;\r\n        return (float)(angle % 360.0);\r\n    }\r\n\r\n    public static Vec3d getPlanetLocation(CelestialBodyData data, double worldTime, double partialTick) {\r\n        double θ = getOrbitAngle(data, worldTime, partialTick);\r\n        double r = data.center.length();\r\n        double x = data.center.x + r * Math.cos(θ);\r\n        double z = data.center.z + r * Math.sin(θ);\r\n        double y = data.center.y;\r\n        return new Vec3d(x, y, z);\r\n    }\r\n\r\n    public static class CelestialBodyData {\r\n        public String name;\r\n        public Vec3d center;\r\n        public double radius;\r\n        public double rotationSpeed;\r\n\r\n        public transient Identifier surfaceTexture;\r\n        public transient Identifier cloudsTexture;\r\n        public transient Identifier atmosphereTexture;\r\n        public transient Identifier darkAlbedoMap;\r\n        public transient Identifier heightMap;\r\n        public transient Identifier normalMap;\r\n\r\n        public transient Identifier ringsTexture;\r\n        public float ringsInnerRadius;\r\n        public float ringsOuterRadius;\r\n\r\n        public double orbitSpeed;\r\n        public boolean hasAtmosphere;\r\n        public boolean isStar;\r\n        public int[] atmosphereColor1;\r\n        public int[] atmosphereColor2;\r\n        public double atmosphereRadius;\r\n        public boolean hasDarkAlbedoMap;\r\n        String surfaceTexturePath, cloudsTexturePath, atmosphereTexturePath;\r\n        String darkAlbedoMapPath, normalMapPath, heightMapPath;\r\n        String ringsTexturePath;\r\n        public boolean usesGeneratedTexture;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java b/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java
--- a/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java	(revision e4bb5d7be1cdf166d1054f15546fec29ea570a16)
+++ b/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java	(date 1747318114000)
@@ -71,7 +71,7 @@
         p.atmosphereColor2 = null;
         p.atmosphereRadius = 0;
         p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = true;
+        p.usesGeneratedTexture = false;
         p.surfaceTexturePath    = "textures/test_textures/8k_mercury.jpg";
         p.heightMapPath         = "textures/test_textures/mercury_height_map.jpg";
         p.normalMapPath         = "textures/test_textures/mercury_normal_map.jpg";
@@ -92,7 +92,7 @@
         p.atmosphereColor2 = null;
         p.atmosphereRadius = 0;
         p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = true;
+        p.usesGeneratedTexture = false;
         p.surfaceTexturePath    = "textures/test_textures/8k_venus_surface.jpg";
         p.heightMapPath         = "textures/test_textures/venus_height_map.jpg";
         p.normalMapPath         = "textures/test_textures/venus_normal_map.jpg";
@@ -136,7 +136,7 @@
         p.atmosphereColor2 = null;
         p.atmosphereRadius = 0;
         p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = true;
+        p.usesGeneratedTexture = false;
         p.surfaceTexturePath    = "textures/test_textures/8k_mars.jpg";
         p.heightMapPath         = "textures/test_textures/mars_height.jpg";
         p.normalMapPath         = "textures/test_textures/mars_normal.jpg";
@@ -157,7 +157,7 @@
         p.atmosphereColor2 = null;
         p.atmosphereRadius = 115;
         p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = true;
+        p.usesGeneratedTexture = false;
         p.surfaceTexturePath    = "textures/test_textures/8k_jupiter.jpg";
         p.heightMapPath         = "textures/test_textures/jupiter_height.jpg";
         p.normalMapPath         = "textures/test_textures/jupitertest.jpg";
@@ -178,7 +178,7 @@
         p.atmosphereColor2 = null;
         p.atmosphereRadius = 0;
         p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = true;
+        p.usesGeneratedTexture = false;
         p.surfaceTexturePath    = "textures/test_textures/8k_saturn.jpg";
         p.heightMapPath         = "textures/test_textures/saturn_height_map.jpg";
         p.normalMapPath         = "textures/test_textures/saturn_normal_map.jpg";
@@ -201,7 +201,7 @@
         p.atmosphereColor2 = null;
         p.atmosphereRadius = 0;
         p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = true;
+        p.usesGeneratedTexture = false;
         p.surfaceTexturePath    = "textures/test_textures/2k_uranus.jpg";
         p.heightMapPath         = "textures/test_textures/earth_height.png";
         p.normalMapPath         = "textures/test_textures/earth_normal.png";
@@ -222,7 +222,7 @@
         p.atmosphereColor2 = null;
         p.atmosphereRadius = 135;
         p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = true;
+        p.usesGeneratedTexture = false;
         p.surfaceTexturePath    = "textures/test_textures/2k_neptune.jpg";
         p.heightMapPath         = "textures/test_textures/neptune_height.jpg";
         p.normalMapPath         = "textures/test_textures/neptune_normal.jpg";
Index: src/main/java/org/copycraftDev/new_horizons/core/entity/ModEntities.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.core.entity;\r\n\r\nimport nazario.liby.api.registry.auto.LibyAutoRegister;\r\nimport net.fabricmc.fabric.api.object.builder.v1.entity.FabricDefaultAttributeRegistry;\r\nimport net.fabricmc.fabric.api.object.builder.v1.entity.FabricEntityTypeBuilder;\r\nimport net.minecraft.entity.EntityDimensions;\r\nimport net.minecraft.entity.EntityType;\r\nimport net.minecraft.entity.SpawnGroup;\r\nimport net.minecraft.entity.attribute.EntityAttributes;\r\nimport net.minecraft.registry.Registry;\r\nimport net.minecraft.util.Identifier;\r\nimport net.minecraft.registry.Registries;\r\nimport org.copycraftDev.new_horizons.NewHorizonsMain;\r\nimport org.copycraftDev.new_horizons.core.portal.TeleportPortal;\r\nimport org.copycraftDev.new_horizons.physics.BlockColliderEntity;\r\nimport qouteall.imm_ptl.core.portal.Portal;\r\n\r\nimport static net.minecraft.entity.attribute.EntityAttributes.GENERIC_MAX_HEALTH;\r\n\r\n@LibyAutoRegister(method = \"initialize\")\r\npublic class ModEntities {\r\n    public static final EntityType<SeatEntity> SEAT_ENTITY = Registry.register(\r\n            Registries.ENTITY_TYPE,\r\n            Identifier.of(NewHorizonsMain.MOD_ID, \"seat_entity\"),\r\n            FabricEntityTypeBuilder.<SeatEntity>create(SpawnGroup.MISC, SeatEntity::new)\r\n                    .dimensions(EntityDimensions.fixed(0.1f, 0.1f)) // Small hitbox\r\n                    .trackRangeBlocks(10) // Important for syncing\r\n                    .trackedUpdateRate(1)  // Important for data syncing\r\n                    .build()\r\n    );\r\n    public static final EntityType<BlockColliderEntity> BLOCK_COLLIDER = Registry.register(\r\n            Registries.ENTITY_TYPE,\r\n            Identifier.of(NewHorizonsMain.MOD_ID, \"blockcollider\"),\r\n            FabricEntityTypeBuilder.<BlockColliderEntity>create(SpawnGroup.MISC, BlockColliderEntity::new)\r\n                    .dimensions(EntityDimensions.fixed(1f,1f))\r\n                    .trackRangeBlocks(64)\r\n                    .build()\r\n    );\r\n\r\n    public static void registerAttributes() {\r\n        FabricDefaultAttributeRegistry.register(BLOCK_COLLIDER, BlockColliderEntity.createAttributes());\r\n    }\r\n\r\n    public static final EntityType<TeleportPortal> TELEPORT_PORTAL = Registry.register(\r\n            Registries.ENTITY_TYPE,\r\n            Identifier.of(NewHorizonsMain.MOD_ID, \"teleport_portal\"),\r\n            FabricEntityTypeBuilder.<TeleportPortal>create(SpawnGroup.MISC, TeleportPortal::new)\r\n                    .dimensions(EntityDimensions.fixed(1.0f, 2.0f))\r\n                    .trackRangeBlocks(10)\r\n                    .trackedUpdateRate(1)\r\n                    .build()\r\n    );\r\n\r\n\r\n\r\n    public static void initialize() {}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/core/entity/ModEntities.java b/src/main/java/org/copycraftDev/new_horizons/core/entity/ModEntities.java
--- a/src/main/java/org/copycraftDev/new_horizons/core/entity/ModEntities.java	(revision e4bb5d7be1cdf166d1054f15546fec29ea570a16)
+++ b/src/main/java/org/copycraftDev/new_horizons/core/entity/ModEntities.java	(date 1747318436000)
@@ -6,16 +6,11 @@
 import net.minecraft.entity.EntityDimensions;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.SpawnGroup;
-import net.minecraft.entity.attribute.EntityAttributes;
 import net.minecraft.registry.Registry;
 import net.minecraft.util.Identifier;
 import net.minecraft.registry.Registries;
 import org.copycraftDev.new_horizons.NewHorizonsMain;
 import org.copycraftDev.new_horizons.core.portal.TeleportPortal;
-import org.copycraftDev.new_horizons.physics.BlockColliderEntity;
-import qouteall.imm_ptl.core.portal.Portal;
-
-import static net.minecraft.entity.attribute.EntityAttributes.GENERIC_MAX_HEALTH;
 
 @LibyAutoRegister(method = "initialize")
 public class ModEntities {
@@ -34,6 +29,7 @@
             FabricEntityTypeBuilder.<BlockColliderEntity>create(SpawnGroup.MISC, BlockColliderEntity::new)
                     .dimensions(EntityDimensions.fixed(1f,1f))
                     .trackRangeBlocks(64)
+                    .trackedUpdateRate(1)
                     .build()
     );
 
Index: src/main/java/org/copycraftDev/new_horizons/physics/BlockColliderEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/physics/BlockColliderEntity.java b/src/main/java/org/copycraftDev/new_horizons/core/entity/BlockColliderEntity.java
rename from src/main/java/org/copycraftDev/new_horizons/physics/BlockColliderEntity.java
rename to src/main/java/org/copycraftDev/new_horizons/core/entity/BlockColliderEntity.java
--- a/src/main/java/org/copycraftDev/new_horizons/physics/BlockColliderEntity.java	(revision e4bb5d7be1cdf166d1054f15546fec29ea570a16)
+++ b/src/main/java/org/copycraftDev/new_horizons/core/entity/BlockColliderEntity.java	(date 1747318660000)
@@ -1,14 +1,13 @@
-package org.copycraftDev.new_horizons.physics;
+package org.copycraftDev.new_horizons.core.entity;
 
-import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.attribute.DefaultAttributeContainer;
 import net.minecraft.entity.attribute.EntityAttributes;
 import net.minecraft.entity.mob.ShulkerEntity;
 import net.minecraft.util.math.Box;
 import net.minecraft.util.math.Vec3d;
-import net.minecraft.util.shape.VoxelShapes;
 import net.minecraft.world.World;
+import org.copycraftDev.new_horizons.physics.PhysicsMain;
 
 /**
  * Invisible 1×1×1 collider‑entity synced to a PhysicsObject’s single block.
@@ -38,7 +37,7 @@
     @Override
     public void tick() {
         if (linkedObject == null || !linkedObject.isAlive()) {
-            this.remove(RemovalReason.valueOf("ded"));
+            this.remove(RemovalReason.DISCARDED);
             return;
         }
         Vec3d w = linkedObject.getPosition().add(localOffset);
Index: src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons;\r\n\r\nimport com.mojang.brigadier.CommandDispatcher;\r\nimport foundry.veil.Veil;\r\nimport foundry.veil.api.client.render.shader.program.ShaderProgram;\r\nimport foundry.veil.platform.VeilEventPlatform;\r\nimport nazario.liby.api.registry.auto.LibyEntrypoints;\r\nimport nazario.liby.api.registry.auto.LibyRegistryLoader;\r\nimport nazario.liby.api.registry.runtime.recipe.LibyIngredient;\r\nimport nazario.liby.api.registry.runtime.recipe.LibyRecipeRegistry;\r\nimport nazario.liby.api.registry.runtime.recipe.types.LibyShapelessCraftingRecipe;\r\nimport net.fabricmc.api.ModInitializer;\r\nimport net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;\r\nimport net.fabricmc.fabric.api.event.lifecycle.v1.ServerTickEvents;\r\nimport net.fabricmc.fabric.api.event.player.UseBlockCallback;\r\nimport net.fabricmc.fabric.api.object.builder.v1.entity.FabricDefaultAttributeRegistry;\r\nimport net.minecraft.block.BlockState;\r\nimport net.minecraft.entity.mob.ShulkerEntity;\r\nimport net.minecraft.item.ItemPlacementContext;\r\nimport net.minecraft.item.ItemUsageContext;\r\nimport net.minecraft.registry.Registries;\r\nimport net.minecraft.registry.Registry;\r\nimport net.minecraft.server.MinecraftServer;\r\nimport net.minecraft.server.command.ServerCommandSource;\r\nimport net.minecraft.server.network.ServerPlayerEntity;\r\nimport net.minecraft.sound.SoundEvent;\r\nimport net.minecraft.util.ActionResult;\r\nimport net.minecraft.util.Identifier;\r\nimport net.minecraft.util.math.BlockPos;\r\nimport net.minecraft.util.math.Vec3d;\r\nimport net.minecraft.util.math.Vec3i;\r\nimport org.copycraftDev.new_horizons.client.planets.MeteorCommand;\r\nimport org.copycraftDev.new_horizons.client.planets.MeteorScheduler;\r\nimport org.copycraftDev.new_horizons.core.bigbang.BigBangCutsceneManager;\r\nimport org.copycraftDev.new_horizons.core.blocks.ModBlocks;\r\nimport org.copycraftDev.new_horizons.core.entity.ModEntities;\r\nimport org.copycraftDev.new_horizons.core.items.ModItems;\r\nimport org.copycraftDev.new_horizons.physics.BlockColliderEntity;\r\nimport org.copycraftDev.new_horizons.physics.PhysicsMain;\r\nimport org.copycraftDev.new_horizons.physics.PhysicsRenderer;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.copycraftDev.new_horizons.core.world.biome.ModBiomes;\r\n\r\npublic class NewHorizonsMain implements ModInitializer {\r\n\r\n    public static final String MOD_ID = \"new_horizons\";\r\n    public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);\r\n    public static final SoundEvent ENGINE_AMBIANCE = register(\"engine_ambiance\");\r\n    public static final SoundEvent ENGINE_BROKEN   = register(\"engine_broken\");\r\n    public static final SoundEvent ENGINE_POWERUP  = register(\"engine_powerup\");\r\n\r\n    private static SoundEvent register(String name) {\r\n        Identifier id = Identifier.of(\"new_horizons\", name);\r\n        return Registry.register(Registries.SOUND_EVENT, id, SoundEvent.of(id));\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onInitialize() {\r\n        BlockColliderEntity.createAttributes();\r\n        ModEntities.registerAttributes();\r\n        LibyRegistryLoader.load(\"org.copycraftDev.new_horizons\", LOGGER, LibyEntrypoints.MAIN);\r\n        Veil.init();\r\n        ServerTickEvents.END_SERVER_TICK.register(MeteorScheduler::onServerTick);\r\n        ServerTickEvents.END_SERVER_TICK.register(PhysicsMain.PhysicsManager::tickAll);\r\n        PhysicsRenderer.register();\r\n        ServerLifecycleEvents.SERVER_STARTED.register(server -> {\r\n            CommandDispatcher<ServerCommandSource> dispatcher = server.getCommandManager().getDispatcher();\r\n            MeteorCommand.register(dispatcher);  // Register the custom command\r\n        });\r\n        ServerLifecycleEvents.SERVER_STARTED.register(server -> {\r\n            server.execute(() -> {\r\n                for (ServerPlayerEntity player : server.getPlayerManager().getPlayerList()) {\r\n                    BigBangCutsceneManager.execute(player);\r\n                }\r\n            });\r\n        });\r\n        UseBlockCallback.EVENT.register((player, world, hand, hit) -> {\r\n            if (world.isClient) return ActionResult.PASS;\r\n\r\n            // the exact click‐position as a Vec3d\r\n            Vec3d clickPos = hit.getPos();\r\n\r\n            for (PhysicsMain.PhysicsObject obj : PhysicsMain.PHYSICS_MANAGER.getAllObjects()) {\r\n                // is the click on the surface of this moving object?\r\n                if (obj.getWorldBounds().expand(1e-6).contains(clickPos)) {\r\n                    // wrap the usage into a placement context\r\n                    ItemUsageContext usageCtx = new ItemUsageContext(player, hand, hit);\r\n                    ItemPlacementContext placeCtx = new ItemPlacementContext(usageCtx);\r\n\r\n                    // ask the context what BlockState it would place\r\n                    BlockState toPlace = placeCtx.getWorld().getBlockState(BlockPos.ofFloored(clickPos));\r\n                    if (toPlace != null) {\r\n                        // compute local coordinate relative to this object's origin\r\n                        BlockPos base = new BlockPos(\r\n                                (int)Math.floor(obj.getPosition().x),\r\n                                (int)Math.floor(obj.getPosition().y),\r\n                                (int)Math.floor(obj.getPosition().z)\r\n                        );\r\n                        BlockPos local = hit.getBlockPos().subtract(base);\r\n\r\n                        // attach into the physics object\r\n                        obj.addBlock(local, toPlace, null);\r\n\r\n                        // consume one item if not in creative\r\n                        if (!player.isCreative()) {\r\n                            player.getStackInHand(hand).decrement(1);\r\n                        }\r\n                        return ActionResult.SUCCESS;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ActionResult.PASS;\r\n        });\r\n        createRecipes();\r\n\r\n\r\n    }\r\n    public void createRecipes() {\r\n        LibyRecipeRegistry.addRecipe(\r\n                new LibyShapelessCraftingRecipe(\r\n                        Identifier.of(MOD_ID, \"wood_top_planks\"),\r\n                        new LibyIngredient[]{\r\n                                LibyIngredient.createItem(ModBlocks.REDWOOD_LOGS)\r\n                        },\r\n                        ModBlocks.REDWOOD_PLANKS.liby$getId(),\r\n                        4\r\n                )\r\n        );\r\n    }\r\n\r\n\r\n\r\n    public static Identifier id(String name){\r\n        return Identifier.of(MOD_ID, name);\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java b/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java
--- a/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java	(revision e4bb5d7be1cdf166d1054f15546fec29ea570a16)
+++ b/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java	(date 1747318338000)
@@ -2,8 +2,6 @@
 
 import com.mojang.brigadier.CommandDispatcher;
 import foundry.veil.Veil;
-import foundry.veil.api.client.render.shader.program.ShaderProgram;
-import foundry.veil.platform.VeilEventPlatform;
 import nazario.liby.api.registry.auto.LibyEntrypoints;
 import nazario.liby.api.registry.auto.LibyRegistryLoader;
 import nazario.liby.api.registry.runtime.recipe.LibyIngredient;
@@ -13,14 +11,11 @@
 import net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;
 import net.fabricmc.fabric.api.event.lifecycle.v1.ServerTickEvents;
 import net.fabricmc.fabric.api.event.player.UseBlockCallback;
-import net.fabricmc.fabric.api.object.builder.v1.entity.FabricDefaultAttributeRegistry;
 import net.minecraft.block.BlockState;
-import net.minecraft.entity.mob.ShulkerEntity;
 import net.minecraft.item.ItemPlacementContext;
 import net.minecraft.item.ItemUsageContext;
 import net.minecraft.registry.Registries;
 import net.minecraft.registry.Registry;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.command.ServerCommandSource;
 import net.minecraft.server.network.ServerPlayerEntity;
 import net.minecraft.sound.SoundEvent;
@@ -28,19 +23,16 @@
 import net.minecraft.util.Identifier;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Vec3d;
-import net.minecraft.util.math.Vec3i;
 import org.copycraftDev.new_horizons.client.planets.MeteorCommand;
 import org.copycraftDev.new_horizons.client.planets.MeteorScheduler;
 import org.copycraftDev.new_horizons.core.bigbang.BigBangCutsceneManager;
 import org.copycraftDev.new_horizons.core.blocks.ModBlocks;
 import org.copycraftDev.new_horizons.core.entity.ModEntities;
-import org.copycraftDev.new_horizons.core.items.ModItems;
-import org.copycraftDev.new_horizons.physics.BlockColliderEntity;
+import org.copycraftDev.new_horizons.core.entity.BlockColliderEntity;
 import org.copycraftDev.new_horizons.physics.PhysicsMain;
 import org.copycraftDev.new_horizons.physics.PhysicsRenderer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.copycraftDev.new_horizons.core.world.biome.ModBiomes;
 
 public class NewHorizonsMain implements ModInitializer {
 
Index: src/main/java/org/copycraftDev/new_horizons/physics/PhysicsMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.physics;\r\n\r\nimport net.minecraft.block.BlockState;\r\nimport net.minecraft.block.Blocks;\r\nimport net.minecraft.block.entity.BlockEntity;\r\nimport net.minecraft.entity.Entity;\r\nimport net.minecraft.server.MinecraftServer;\r\nimport net.minecraft.server.world.ServerWorld;\r\nimport net.minecraft.util.math.*;\r\nimport net.minecraft.world.WorldAccess;\r\nimport org.copycraftDev.new_horizons.core.entity.ModEntities;\r\n\r\nimport java.util.*;\r\n\r\npublic class PhysicsMain {\r\n    public static final PhysicsManager PHYSICS_MANAGER = new PhysicsManager();\r\n\r\n    public static class PhysicsManager {\r\n        private static final List<PhysicsObject> activeObjects = new ArrayList<>();\r\n\r\n\r\n        /** create a new object at pos, remembering the block‑grid origin */\r\n        public PhysicsObject create(ServerWorld world, Vec3d pos, BlockPos origin) {\r\n            PhysicsObject obj = new PhysicsObject(pos, origin);\r\n            activeObjects.add(obj);\r\n            return obj;\r\n        }\r\n        public void removeObject(PhysicsObject object) {\r\n            activeObjects.remove(object);\r\n        }\r\n        public List<PhysicsObject> getAllObjects() {\r\n            return activeObjects;\r\n        }\r\n\r\n        /** call once per tick on server */\r\n        public static void tickAll(MinecraftServer world) {\r\n            for (PhysicsObject obj : new ArrayList<>(activeObjects)) {\r\n                obj.tick(world.getOverworld());\r\n                BlockAttachmentHandler.attachDetachedBlocks(world.getOverworld(), obj);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static class PhysicsObject {\r\n        private final BlockPos origin;\r\n        private Vec3d position;\r\n        private Vec3d velocity = Vec3d.ZERO;\r\n        private Vec3d rotation = Vec3d.ZERO;\r\n        private Box localBounds = null;\r\n\r\n        private final Map<BlockPos, BlockState> blocks = new HashMap<>();\r\n        final Map<BlockPos, BlockEntity> blockEntities = new HashMap<>();\r\n        private final List<BlockPos> previousGlobals = new ArrayList<>();\r\n        private final Map<PhysicsObject, Map<Vec3d, BlockColliderEntity>> colliders = new IdentityHashMap<>();\r\n\r\n        public PhysicsObject(Vec3d startPos, BlockPos origin) {\r\n            this.position = startPos;\r\n            this.origin = origin;\r\n        }\r\n\r\n        /** easy control methods **/\r\n        public void setVelocity(Vec3d v) { velocity = v; }\r\n        public void addVelocity(Vec3d dv) { velocity = velocity.add(dv); }\r\n        public void setRotation(Vec3d rotDegrees) { rotation = rotDegrees; }\r\n        public void addRotation(Vec3d dRot) { rotation = rotation.add(dRot); }\r\n        public BlockPos getOrigin() { return origin; }\r\n        public Vec3d getPosition() { return position; }\r\n        public Vec3d getVelocity() { return velocity; }\r\n        public Map<BlockPos, BlockEntity> getBlockEntities() {\r\n            return blockEntities;\r\n        }\r\n\r\n        public Map<BlockPos, BlockState> getBlocks() { return blocks; }\r\n\r\n        public void addBlock(BlockPos localPos, BlockState state, BlockEntity be) {\r\n            blocks.put(localPos, state);\r\n            if (be != null) blockEntities.put(localPos, be);\r\n            localBounds = null;\r\n        }\r\n\r\n        public void tick(ServerWorld world) {\r\n            for (PhysicsObject obj : PHYSICS_MANAGER.getAllObjects()) {\r\n                Map<Vec3d, BlockColliderEntity> map = colliders.computeIfAbsent(obj, o -> new HashMap<>());\r\n\r\n                for (var entry : obj.getBlocks().entrySet()) {\r\n                    Vec3d offset = Vec3d.of(entry.getKey());\r\n                    if (!map.containsKey(offset)) {\r\n                        BlockColliderEntity c = new BlockColliderEntity(ModEntities.BLOCK_COLLIDER, world);\r\n                        world.spawnEntity(c);\r\n                        c.init(obj, offset);\r\n                        map.put(offset, c);\r\n                    }\r\n                    map.get(offset).init(obj, offset);\r\n                }\r\n\r\n                map.keySet().removeIf(off -> {\r\n                    boolean gone = !obj.getBlocks().containsKey(off);\r\n                    if (gone) map.get(off).remove(Entity.RemovalReason.DISCARDED); // or .KILLED/.UNLOADED\r\n                    return gone;\r\n                });\r\n\r\n                // These must be done for each object!\r\n                obj.applyGravity();\r\n                Vec3d attempted = obj.velocity;\r\n                Vec3d moved = obj.doMovement(world, attempted);\r\n                obj.position = obj.position.add(moved);\r\n                obj.updateWorldBlocks(world);\r\n            }\r\n        }\r\n\r\n\r\n        private void applyGravity() {\r\n            velocity = velocity.add(0, PhysicsConfig.GRAVITY, 0);\r\n            if (velocity.y < PhysicsConfig.TERMINAL_VELOCITY) {\r\n                velocity = new Vec3d(velocity.x, PhysicsConfig.TERMINAL_VELOCITY, velocity.z);\r\n            }\r\n        }\r\n\r\n        private Vec3d doMovement(WorldAccess world, Vec3d attempted) {\r\n            Box bounds = getWorldBounds();\r\n            Vec3d moved = attempted;\r\n\r\n            // X axis\r\n            moved = tryMove(world, bounds, moved.x, 0, 0);\r\n            bounds = bounds.offset(moved.x, 0, 0);\r\n            // Y axis\r\n            double my = tryMove(world, bounds, 0, moved.y, 0).y;\r\n            moved = new Vec3d(moved.x, my, moved.z);\r\n            bounds = bounds.offset(0, my, 0);\r\n            // Z axis\r\n            double mz = tryMove(world, bounds, 0, 0, moved.z).z;\r\n            moved = new Vec3d(moved.x, moved.y, mz);\r\n\r\n            // bounce & friction\r\n            if (moved.y != attempted.y) velocity = new Vec3d(velocity.x, -velocity.y * PhysicsConfig.BOUNCE_FACTOR, velocity.z);\r\n            if (moved.x != attempted.x) velocity = new Vec3d(velocity.x * PhysicsConfig.FRICTION, velocity.y, velocity.z);\r\n            if (moved.z != attempted.z) velocity = new Vec3d(velocity.x, velocity.y, velocity.z * PhysicsConfig.FRICTION);\r\n\r\n            return moved;\r\n        }\r\n\r\n        private Vec3d tryMove(WorldAccess world, Box bounds, double dx, double dy, double dz) {\r\n            Box nb = bounds.offset(dx, dy, dz);\r\n            return collides(world, nb) ? Vec3d.ZERO : new Vec3d(dx, dy, dz);\r\n        }\r\n\r\n        private boolean collides(WorldAccess world, Box box) {\r\n            // —————— 1) world collision (unchanged) ——————\r\n            int minX = MathHelper.floor(box.minX), maxX = MathHelper.ceil(box.maxX);\r\n            int minY = MathHelper.floor(box.minY), maxY = MathHelper.ceil(box.maxY);\r\n            int minZ = MathHelper.floor(box.minZ), maxZ = MathHelper.ceil(box.maxZ);\r\n            BlockPos.Mutable mpos = new BlockPos.Mutable();\r\n            for (int x = minX; x < maxX; x++) {\r\n                for (int y = minY; y < maxY; y++) {\r\n                    for (int z = minZ; z < maxZ; z++) {\r\n                        mpos.set(x, y, z);\r\n                        BlockState s = world.getBlockState(mpos);\r\n                        if (!s.isAir() && s.getCollisionShape(world, mpos).getBoundingBoxes().stream()\r\n                                .anyMatch(bb -> Box.from(new BlockBox(mpos)).offset(mpos).intersects(box))) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // —————— 2) self‑collision: treat each stored block as collision shape ——————\r\n            Box worldBounds = getWorldBounds();\r\n            Vec3d objPos = getPosition();\r\n            for (BlockPos local : blocks.keySet()) {\r\n                // get that block’s AABB in world coords\r\n                Box bb = new Box(\r\n                        objPos.x + local.getX(),\r\n                        objPos.y + local.getY(),\r\n                        objPos.z + local.getZ(),\r\n                        objPos.x + local.getX() + 1,\r\n                        objPos.y + local.getY() + 1,\r\n                        objPos.z + local.getZ() + 1\r\n                );\r\n                if (bb.intersects(box)) {\r\n                    return true;\r\n                }\r\n\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n\r\n        private Box getLocalBounds() {\r\n            if (localBounds != null) return localBounds;\r\n            Box b = null;\r\n            for (BlockPos p : blocks.keySet()) {\r\n                Box bb = new Box(p.getX(), p.getY(), p.getZ(),\r\n                        p.getX()+1, p.getY()+1, p.getZ()+1);\r\n                b = (b==null)? bb : b.union(bb);\r\n            }\r\n            localBounds = b;\r\n            return b;\r\n        }\r\n\r\n        public Box getWorldBounds() {\r\n            Box lb = getLocalBounds();\r\n            return new Box(lb.minX + position.x, lb.minY + position.y, lb.minZ + position.z,\r\n                    lb.maxX + position.x, lb.maxY + position.y, lb.maxZ + position.z);\r\n        }\r\n\r\n        private void updateWorldBlocks(ServerWorld world) {\r\n            // 1) remove last tick’s blocks from the world\r\n            for (BlockPos oldPos : previousGlobals) {\r\n                world.setBlockState(oldPos, Blocks.AIR.getDefaultState(), 3);\r\n            }\r\n            previousGlobals.clear();\r\n\r\n            // 2) place this tick’s blocks with flag=3 (update listeners & collision)\r\n            for (Map.Entry<BlockPos, BlockState> entry : blocks.entrySet()) {\r\n                BlockPos local = entry.getKey();\r\n                BlockState state = entry.getValue();\r\n                BlockPos global = new BlockPos(\r\n                        (int) Math.floor(position.x) + local.getX(),\r\n                        (int) Math.floor(position.y) + local.getY(),\r\n                        (int) Math.floor(position.z) + local.getZ()\r\n                );\r\n                world.setBlockState(global, state, 3);\r\n                previousGlobals.add(global);\r\n            }\r\n        }\r\n\r\n\r\n        public Vec3d getRotation() {\r\n            return rotation;\r\n        }\r\n\r\n        public boolean isAlive() {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/physics/PhysicsMain.java b/src/main/java/org/copycraftDev/new_horizons/physics/PhysicsMain.java
--- a/src/main/java/org/copycraftDev/new_horizons/physics/PhysicsMain.java	(revision e4bb5d7be1cdf166d1054f15546fec29ea570a16)
+++ b/src/main/java/org/copycraftDev/new_horizons/physics/PhysicsMain.java	(date 1747318338000)
@@ -8,6 +8,7 @@
 import net.minecraft.server.world.ServerWorld;
 import net.minecraft.util.math.*;
 import net.minecraft.world.WorldAccess;
+import org.copycraftDev.new_horizons.core.entity.BlockColliderEntity;
 import org.copycraftDev.new_horizons.core.entity.ModEntities;
 
 import java.util.*;
