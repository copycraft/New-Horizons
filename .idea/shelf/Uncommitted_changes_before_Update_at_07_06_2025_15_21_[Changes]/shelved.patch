Index: src/main/java/org/copycraftDev/new_horizons/mixin/client/InventoryScreenMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.mixin.client;\r\n\r\nimport net.minecraft.client.gui.DrawContext;\r\nimport net.minecraft.client.gui.screen.Screen;\r\nimport net.minecraft.client.gui.screen.ingame.InventoryScreen;\r\nimport net.minecraft.item.ItemStack;\r\nimport net.minecraft.screen.PlayerScreenHandler;\r\nimport net.minecraft.text.Text;\r\nimport net.minecraft.util.Identifier;\r\nimport org.copycraftDev.new_horizons.client.rendering.postHelpers.CustomInventoryProvider;\r\nimport org.spongepowered.asm.mixin.Mixin;\r\nimport org.spongepowered.asm.mixin.injection.At;\r\nimport org.spongepowered.asm.mixin.injection.Inject;\r\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\r\n\r\n@Mixin(InventoryScreen.class)\r\nabstract class InventoryScreenMixin extends Screen {\r\n\r\n    protected InventoryScreenMixin(Text title) {\r\n        super(title);\r\n    }\r\n\r\n    @Inject(method = \"drawBackground\", at = @At(\"TAIL\"))\r\n    private void drawCustomSlots(DrawContext context, float delta, int mouseX, int mouseY, CallbackInfo ci) {\r\n        // Cast handler to our interface to retrieve the custom inventory array\r\n        // Cast this to HandledScreenAccessor to access handler, x, and y fields\r\n        HandledScreenAccessor<PlayerScreenHandler> accessor = (HandledScreenAccessor<PlayerScreenHandler>) (Object) this;\r\n\r\n        PlayerScreenHandler handler = accessor.getHandler();\r\n        int left = accessor.getX();\r\n        int top = accessor.getY();\r\n\r\n\r\n        if (!(handler instanceof CustomInventoryProvider customProvider)) return;\r\n\r\n        ItemStack[] custom = customProvider.getCustomInventory();\r\n\r\n// Your custom slot positions must match PlayerScreenHandlerMixin slot positions\r\n        int[][] positions = {\r\n                {77, 44}  // Adjust this to your custom slot position(s)\r\n        };\r\n\r\n\r\n        Identifier ICON_TEXTURE = Identifier.of(\"new_horizons\", \"textures/gui/container/oxygen_slot_icon.png\");\r\n\r\n        int iconU = 0;\r\n        int iconV = 94;\r\n        int iconWidth = 16;\r\n        int iconHeight = 16;\r\n\r\n        int slotSize = 18;\r\n\r\n        for (int i = 0; i < custom.length; i++) {\r\n            int slotX = left + positions[i][0];\r\n            int slotY = top + positions[i][1];\r\n            ItemStack stack = custom[i];\r\n\r\n            if (stack.isEmpty()) {\r\n                // Center the icon inside the slot by offsetting 1 pixel\r\n                int iconX = slotX + (slotSize - iconWidth) / 2;\r\n                int iconY = slotY + (slotSize - iconHeight) / 2;\r\n                context.drawTexture(ICON_TEXTURE, iconX, iconY, iconU, iconV, iconWidth, iconHeight);\r\n            } else {\r\n                context.drawItem(stack, slotX, slotY);\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/mixin/client/InventoryScreenMixin.java b/src/main/java/org/copycraftDev/new_horizons/mixin/client/InventoryScreenMixin.java
--- a/src/main/java/org/copycraftDev/new_horizons/mixin/client/InventoryScreenMixin.java	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/java/org/copycraftDev/new_horizons/mixin/client/InventoryScreenMixin.java	(date 1749302430000)
@@ -1,69 +1,89 @@
 package org.copycraftDev.new_horizons.mixin.client;
 
 import net.minecraft.client.gui.DrawContext;
-import net.minecraft.client.gui.screen.Screen;
 import net.minecraft.client.gui.screen.ingame.InventoryScreen;
+import net.minecraft.client.gui.screen.ingame.HandledScreen;
+import net.minecraft.client.gui.widget.ButtonWidget;
+import net.minecraft.client.gui.widget.TexturedButtonWidget;
+import net.minecraft.client.util.math.MatrixStack;
+import net.minecraft.entity.player.PlayerInventory;
 import net.minecraft.item.ItemStack;
 import net.minecraft.screen.PlayerScreenHandler;
+import net.minecraft.screen.slot.Slot;
 import net.minecraft.text.Text;
 import net.minecraft.util.Identifier;
 import org.copycraftDev.new_horizons.client.rendering.postHelpers.CustomInventoryProvider;
 import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Unique;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Inject;
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
+
+import java.util.List;
 
 @Mixin(InventoryScreen.class)
-abstract class InventoryScreenMixin extends Screen {
+public abstract class InventoryScreenMixin extends HandledScreen<PlayerScreenHandler> {
+
+    @Unique private static final int PANEL_COLS = 5;
+    @Unique private static final int PANEL_ROWS = 4;
+    @Unique private static final int PANEL_SLOT_COUNT = PANEL_COLS * PANEL_ROWS;
+    @Unique private static final int SLOT_SIZE = 18;
+    @Unique private static final Identifier PANEL_TEXTURE = new Identifier("new_horizons", "textures/gui/custom_panel.png");
 
-    protected InventoryScreenMixin(Text title) {
-        super(title);
+    @Unique private boolean panelOpen = false;
+    @Unique private float panelSlide = 0f;
+    @Unique private int scrollOffset = 0;
+    @Unique private int maxScroll = 0;
+
+    protected InventoryScreenMixin(PlayerScreenHandler handler, PlayerInventory inventory, Text title) {
+        super(handler, inventory, title);
+    }
+
+    @Inject(method = "init", at = @At("TAIL"))
+    private void onInit(CallbackInfo ci) {
+        this.addDrawableChild(ButtonWidget.builder(Text.literal("≡"), button -> {
+            panelOpen = !panelOpen;
+        }).dimensions(this.x + PANEL_BUTTON_X, this.y + PANEL_BUTTON_Y, 20, 20).build());
     }
 
     @Inject(method = "drawBackground", at = @At("TAIL"))
-    private void drawCustomSlots(DrawContext context, float delta, int mouseX, int mouseY, CallbackInfo ci) {
-        // Cast handler to our interface to retrieve the custom inventory array
-        // Cast this to HandledScreenAccessor to access handler, x, and y fields
-        HandledScreenAccessor<PlayerScreenHandler> accessor = (HandledScreenAccessor<PlayerScreenHandler>) (Object) this;
-
-        PlayerScreenHandler handler = accessor.getHandler();
-        int left = accessor.getX();
-        int top = accessor.getY();
+    private void drawPanel(DrawContext context, float delta, int mouseX, int mouseY, CallbackInfo ci) {
+        // Animate panel slide
+        panelSlide += (panelOpen ? 1 : -1) * delta * 10;
+        panelSlide = Math.max(0, Math.min(panelSlide, PANEL_WIDTH));
 
+        if (!(this.handler instanceof CustomInventoryProvider provider)) return;
+        ItemStack[] customInv = provider.getCustomInventory();
 
-        if (!(handler instanceof CustomInventoryProvider customProvider)) return;
+        // Draw background panel
+        int panelX = this.x + this.backgroundWidth;
+        int panelY = this.y + 20;
+        context.drawTexture(PANEL_TEXTURE, panelX, panelY, 0, 0, (int) panelSlide, PANEL_HEIGHT);
 
-        ItemStack[] custom = customProvider.getCustomInventory();
+        // Compute how many rows are scrollable
+        maxScroll = Math.max(0, (customInv.length + PANEL_COLS - 1) / PANEL_COLS - PANEL_ROWS);
 
-// Your custom slot positions must match PlayerScreenHandlerMixin slot positions
-        int[][] positions = {
-                {77, 44}  // Adjust this to your custom slot position(s)
-        };
+        // Draw items
+        int startIndex = scrollOffset * PANEL_COLS;
+        int endIndex = Math.min(customInv.length, startIndex + PANEL_ROWS * PANEL_COLS);
+        for (int i = startIndex; i < endIndex; i++) {
+            int slotIndex = i - startIndex;
+            int col = slotIndex % PANEL_COLS;
+            int row = slotIndex / PANEL_COLS;
 
+            int sx = panelX + col * SLOT_SIZE + 4;
+            int sy = panelY + row * SLOT_SIZE + 4;
 
-        Identifier ICON_TEXTURE = Identifier.of("new_horizons", "textures/gui/container/oxygen_slot_icon.png");
-
-        int iconU = 0;
-        int iconV = 94;
-        int iconWidth = 16;
-        int iconHeight = 16;
-
-        int slotSize = 18;
-
-        for (int i = 0; i < custom.length; i++) {
-            int slotX = left + positions[i][0];
-            int slotY = top + positions[i][1];
-            ItemStack stack = custom[i];
-
-            if (stack.isEmpty()) {
-                // Center the icon inside the slot by offsetting 1 pixel
-                int iconX = slotX + (slotSize - iconWidth) / 2;
-                int iconY = slotY + (slotSize - iconHeight) / 2;
-                context.drawTexture(ICON_TEXTURE, iconX, iconY, iconU, iconV, iconWidth, iconHeight);
-            } else {
-                context.drawItem(stack, slotX, slotY);
-            }
-        }
+            context.drawItem(customInv[i], sx, sy);
+            context.drawItemInSlot(this.textRenderer, customInv[i], sx, sy);
+        }
+    }
 
+    @Inject(method = "mouseScrolled", at = @At("HEAD"), cancellable = true)
+    private void onMouseScrolled(double mouseX, double mouseY, double horizontal, double vertical, CallbackInfoReturnable<Boolean> cir) {
+        if (!panelOpen) return;
+        scrollOffset = Math.max(0, Math.min(maxScroll, scrollOffset - (int) Math.signum(vertical)));
+        cir.setReturnValue(true);
     }
 }
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'fabric-loom' version '1.9-SNAPSHOT'\r\n    id 'maven-publish'\r\n}\r\n\r\nversion = project.mod_version\r\ngroup = project.maven_group\r\n\r\nbase {\r\n    archivesName = project.archives_base_name\r\n}\r\n\r\n\r\nrepositories {\r\n    maven {\r\n        name = 'BlameJared Maven (CrT / Bookshelf)'\r\n        url = 'https://maven.blamejared.com'\r\n    }\r\n    maven {\r\n        name = \"DaPorkchop_\"\r\n        url = \"https://maven.daporkchop.net/\"\r\n    }\r\n    maven {\r\n        name = \"CurseMaven\"\r\n        url \"https://cursemaven.com\"\r\n    }\r\n    maven {\r\n        name = \"Modrinth Maven\"\r\n        url \"https://api.modrinth.com/maven\"\r\n    }\r\n    maven {\r\n        name = \"Jitpack\"\r\n        url 'https://jitpack.io'\r\n    }\r\n    maven {\r\n        name = \"Shedaniel Maven\"\r\n        url 'https://maven.shedaniel.me'\r\n    }\r\n    maven {\r\n        name = \"TheIllusivec4\"\r\n        url = \"https://maven.theillusivec4.top/\"\r\n    }\r\n    maven {\r\n        name = \"JamiesWhiteShirt\"\r\n        url = \"https://maven.jamieswhiteshirt.com/libs-release\"\r\n    }\r\n    maven {\r\n        name = \"TerraformersMC\"\r\n        url = \"https://maven.terraformersmc.com/\"\r\n    }\r\n    maven {\r\n        name = 'Ladysnake Mods'\r\n        url = 'https://maven.ladysnake.org/releases'\r\n    }\r\n    maven {\r\n        name = \"MineBlock11 Maven\"\r\n        url = \"https://maven.imb11.dev/releases/\"\r\n    }\r\n    maven {\r\n        name = \"Architectury Maven\"\r\n        url = \"https://maven.architectury.dev/\"\r\n    }\r\n    maven {\r\n        name = \"Xander Maven\"\r\n        url = \"https://maven.isxander.dev/releases\"\r\n    }\r\n}\r\n\r\ndependencies {\r\n    minecraft \"com.mojang:minecraft:${project.minecraft_version}\"\r\n    mappings \"net.fabricmc:yarn:${project.yarn_mappings}:v2\"\r\n    modImplementation \"net.fabricmc:fabric-loader:${project.loader_version}\"\r\n    modImplementation \"net.fabricmc.fabric-api:fabric-api:${project.fabric_version}\"\r\n    modImplementation \"curse.maven:fabricskyboxes-408209:5424365\"\r\n    modImplementation \"maven.modrinth:lithium:mc1.21.1-0.15.0-fabric\"\r\n    modImplementation \"maven.modrinth:liby:1.21.1-build-2.1\"\r\n    implementation \"org.reflections:reflections:0.10.2\"\r\n    modImplementation \"maven.modrinth:cardinal-components-api:6.1.2\"\r\n    modImplementation(\"foundry.veil:veil-fabric-1.21.1:1.0.0.206\") {\r\n       exclude group: \"maven.modrinth\"\r\n   }\r\n    include modApi('teamreborn:energy:4.1.0')\r\n    modImplementation \"maven.modrinth:modmenu:11.0.3\"\r\n    modImplementation \"curse.maven:music-notification-817206:5617079\"\r\n    modImplementation \"curse.maven:cloth-config-348521:5729125\"\r\n    modImplementation \"maven.modrinth:sodium:mc1.21.1-0.6.9-fabric\"\r\n    modImplementation \"maven.modrinth:iris:1.8.8+1.21.1-fabric\"\r\n}\r\n\r\n\r\nprocessResources {\r\n    inputs.property \"version\", project.version\r\n    inputs.property \"minecraft_version\", project.minecraft_version\r\n    inputs.property \"loader_version\", project.loader_version\r\n    filteringCharset \"UTF-8\"\r\n\r\n    filesMatching(\"fabric.mod.json\") {\r\n        expand \"version\": project.version,\r\n                \"minecraft_version\": project.minecraft_version,\r\n                \"loader_version\": project.loader_version\r\n    }\r\n}\r\n\r\ndef targetJavaVersion = 21\r\ntasks.withType(JavaCompile).configureEach {\r\n    // ensure that the encoding is set to UTF-8, no matter what the system default is\r\n    // this fixes some edge cases with special characters not displaying correctly\r\n    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html\r\n    // If Javadoc is generated, this must be specified in that task too.\r\n    it.options.encoding = \"UTF-8\"\r\n    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {\r\n        it.options.release.set(targetJavaVersion)\r\n    }\r\n}\r\n\r\njava {\r\n    def javaVersion = JavaVersion.toVersion(targetJavaVersion)\r\n    if (JavaVersion.current() < javaVersion) {\r\n        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)\r\n    }\r\n    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the \"build\" task\r\n    // if it is present.\r\n    // If you remove this line, sources will not be generated.\r\n    withSourcesJar()\r\n}\r\n\r\njar {\r\n    from(\"LICENSE\") {\r\n        rename { \"${it}_${project.archivesBaseName}\" }\r\n    }\r\n}\r\n\r\n// configure the maven publication\r\npublishing {\r\n    publications {\r\n        create(\"mavenJava\", MavenPublication) {\r\n            artifactId = project.archives_base_name\r\n            from components.java\r\n        }\r\n    }\r\n\r\n    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.\r\n    repositories {\r\n        // Add repositories to publish to here.\r\n        // Notice: This block does NOT have the same function as the block in the top level.\r\n        // The repositories here will be used for publishing your artifact, not for\r\n        // retrieving dependencies.\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/build.gradle	(date 1749300398000)
@@ -85,6 +85,15 @@
     modImplementation "curse.maven:cloth-config-348521:5729125"
     modImplementation "maven.modrinth:sodium:mc1.21.1-0.6.9-fabric"
     modImplementation "maven.modrinth:iris:1.8.8+1.21.1-fabric"
+    modImplementation "maven.modrinth:vivecraft:1.21.1-1.2.5-fabric"
+    include "org.lwjgl:lwjgl"
+    include "org.lwjgl:lwjgl-glfw"
+    include "org.lwjgl:lwjgl-opengl"
+    implementation "org.lwjgl:lwjgl:3.3.1"
+    implementation "org.lwjgl:lwjgl-glfw:3.3.1"
+    implementation "org.lwjgl:lwjgl-opengl:3.3.1"
+    modImplementation("com.electronwill.night-config:core:3.6.4")
+    modImplementation("com.electronwill.night-config:toml:3.6.4") // if needed
 }
 
 
Index: src/main/resources/fabric.mod.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"schemaVersion\": 1,\r\n  \"id\": \"new_horizons\",\r\n  \"version\": \"${version}\",\r\n  \"name\": \"New Horizons\",\r\n  \"description\": \"yea. this is a mod that adds space to the game. it is a work in progress and will be updated frequently. it is not recommended to use this mod in a production environment.\",\r\n  \"authors\": [\"CopicraftDev(main developer)\", \"Flugi(artist)\", \"Eyalego(artist)\"],\r\n  \"contact\": {},\r\n  \"license\": \"LGPL-3.0\",\r\n  \"icon\": \"assets/new_horizons/fog.png\",\r\n  \"environment\": \"*\",\r\n  \"entrypoints\": {\r\n    \"client\": [\r\n      \"org.copycraftDev.new_horizons.Lidar.LidarPointRenderer\",\r\n      \"org.copycraftDev.new_horizons.client.NewHorizonsClient\"\r\n    ],\r\n    \"main\": [\r\n      \"org.copycraftDev.new_horizons.NewHorizonsMain\"\r\n    ],\r\n    \"fabric-datagen\": [\r\n      \"org.copycraftDev.new_horizons.NewHorizonsDataGen\"\r\n    ]\r\n  },\r\n  \"mixins\": [\r\n    \"new_horizons.mixins.json\"\r\n  ],\r\n  \"depends\": {\r\n    \"fabricloader\": \">=${loader_version}\",\r\n    \"fabric\": \"*\",\r\n    \"minecraft\": \"${minecraft_version}\",\r\n    \"liby\":\"*\"\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/fabric.mod.json b/src/main/resources/fabric.mod.json
--- a/src/main/resources/fabric.mod.json	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/resources/fabric.mod.json	(date 1749147784000)
@@ -12,7 +12,8 @@
   "entrypoints": {
     "client": [
       "org.copycraftDev.new_horizons.Lidar.LidarPointRenderer",
-      "org.copycraftDev.new_horizons.client.NewHorizonsClient"
+      "org.copycraftDev.new_horizons.client.NewHorizonsClient",
+      "org.copycraftDev.new_horizons.client.voice.VoiceChatDriver"
     ],
     "main": [
       "org.copycraftDev.new_horizons.NewHorizonsMain"
Index: src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons;\r\n\r\nimport com.mojang.brigadier.CommandDispatcher;\r\nimport foundry.veil.Veil;\r\nimport nazario.liby.api.registry.auto.LibyEntrypoints;\r\nimport nazario.liby.api.registry.auto.LibyRegistryLoader;\r\nimport nazario.liby.api.registry.runtime.recipe.LibyIngredient;\r\nimport nazario.liby.api.registry.runtime.recipe.LibyRecipeRegistry;\r\nimport nazario.liby.api.registry.runtime.recipe.types.LibyShapelessCraftingRecipe;\r\nimport net.fabricmc.api.ModInitializer;\r\nimport net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;\r\nimport net.fabricmc.fabric.api.event.lifecycle.v1.ServerTickEvents;\r\nimport net.fabricmc.fabric.api.event.player.UseBlockCallback;\r\nimport net.fabricmc.fabric.api.event.player.UseEntityCallback;\r\nimport net.minecraft.block.BlockState;\r\nimport net.minecraft.block.Blocks;\r\nimport net.minecraft.entity.Entity;\r\nimport net.minecraft.entity.EntityType;\r\nimport net.minecraft.entity.player.PlayerEntity;\r\nimport net.minecraft.item.BlockItem;\r\nimport net.minecraft.item.ItemPlacementContext;\r\nimport net.minecraft.item.ItemStack;\r\nimport net.minecraft.item.ItemUsageContext;\r\nimport net.minecraft.registry.Registries;\r\nimport net.minecraft.registry.Registry;\r\nimport net.minecraft.server.command.ServerCommandSource;\r\nimport net.minecraft.server.network.ServerPlayerEntity;\r\nimport net.minecraft.sound.SoundEvent;\r\nimport net.minecraft.util.ActionResult;\r\nimport net.minecraft.util.Hand;\r\nimport net.minecraft.util.Identifier;\r\nimport net.minecraft.util.hit.BlockHitResult;\r\nimport net.minecraft.util.hit.EntityHitResult;\r\nimport net.minecraft.util.math.BlockPos;\r\nimport net.minecraft.util.math.Box;\r\nimport net.minecraft.util.math.Direction;\r\nimport net.minecraft.util.math.Vec3d;\r\nimport net.minecraft.world.World;\r\nimport org.copycraftDev.new_horizons.client.planets.MeteorCommand;\r\nimport org.copycraftDev.new_horizons.client.planets.MeteorScheduler;\r\nimport org.copycraftDev.new_horizons.core.bigbang.BigBangCutsceneManager;\r\nimport org.copycraftDev.new_horizons.core.blocks.ModBlocks;\r\nimport org.copycraftDev.new_horizons.core.entity.ModEntities;\r\nimport org.copycraftDev.new_horizons.core.entity.BlockColliderEntity;\r\nimport org.copycraftDev.new_horizons.physics.PhysicsMain;\r\nimport org.copycraftDev.new_horizons.physics.PhysicsRenderer;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.copycraftDev.new_horizons.Lidar.LidarSystem;\r\n\r\npublic class NewHorizonsMain implements ModInitializer {\r\n\r\n    public static final String MOD_ID = \"new_horizons\";\r\n    public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);\r\n    public static final SoundEvent ENGINE_AMBIANCE = register(\"engine_ambiance\");\r\n    public static final SoundEvent ENGINE_BROKEN   = register(\"engine_broken\");\r\n    public static final SoundEvent ENGINE_POWERUP  = register(\"engine_powerup\");\r\n\r\n    private static SoundEvent register(String name) {\r\n        Identifier id = Identifier.of(\"new_horizons\", name);\r\n        return Registry.register(Registries.SOUND_EVENT, id, SoundEvent.of(id));\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onInitialize() {\r\n\r\n\r\n\r\n        LidarSystem.ENTITY_COLOR_OVERRIDES.put(\r\n                EntityType.ZOMBIE,\r\n                new LidarSystem.ColorInfo(0.0f, 1.0f, 1.0f, 1f)              // 50% chance to reveal\r\n        );\r\n        LidarSystem.BLOCK_COLOR_OVERRIDES.put(\r\n                Blocks.IRON_ORE,\r\n                new LidarSystem.ColorInfo(.0f, 0.0f, 0.0f, 1f)\r\n        );\r\n\r\n\r\n\r\n\r\n        // Intercept placements on blocks adjacent to your collider\r\n        UseBlockCallback.EVENT.register(this::onUseBlock);\r\n\r\n        // Intercept right-click on the collider entity itself\r\n        UseEntityCallback.EVENT.register(this::onUseEntity);\r\n        BlockColliderEntity.createAttributes();\r\n        ModEntities.registerAttributes();\r\n        LibyRegistryLoader.load(\"org.copycraftDev.new_horizons\", LOGGER, LibyEntrypoints.MAIN);\r\n        Veil.init();\r\n        ServerTickEvents.END_SERVER_TICK.register(MeteorScheduler::onServerTick);\r\n        ServerTickEvents.END_SERVER_TICK.register(PhysicsMain.PhysicsManager::tickAll);\r\n\r\n        PhysicsRenderer.register();\r\n        ServerLifecycleEvents.SERVER_STARTED.register(server -> {\r\n            CommandDispatcher<ServerCommandSource> dispatcher = server.getCommandManager().getDispatcher();\r\n            MeteorCommand.register(dispatcher);  // Register the custom command\r\n        });\r\n        ServerLifecycleEvents.SERVER_STARTED.register(server -> {\r\n            server.execute(() -> {\r\n                for (ServerPlayerEntity player : server.getPlayerManager().getPlayerList()) {\r\n                    BigBangCutsceneManager.execute(player);\r\n                }\r\n            });\r\n        });\r\n        UseBlockCallback.EVENT.register((player, world, hand, hit) -> {\r\n            if (world.isClient) return ActionResult.PASS;\r\n\r\n            // the exact click‐position as a Vec3d\r\n            Vec3d clickPos = hit.getPos();\r\n\r\n            for (PhysicsMain.PhysicsObject obj : PhysicsMain.PHYSICS_MANAGER.getAllObjects()) {\r\n                // is the click on the surface of this moving object?\r\n                if (obj.getWorldBounds().expand(1e-6).contains(clickPos)) {\r\n                    // wrap the usage into a placement context\r\n                    ItemUsageContext usageCtx = new ItemUsageContext(player, hand, hit);\r\n                    ItemPlacementContext placeCtx = new ItemPlacementContext(usageCtx);\r\n\r\n                    // ask the context what BlockState it would place\r\n                    BlockState toPlace = placeCtx.getWorld().getBlockState(BlockPos.ofFloored(clickPos));\r\n                    if (toPlace != null) {\r\n                        // compute local coordinate relative to this object's origin\r\n                        BlockPos base = new BlockPos(\r\n                                (int)Math.floor(obj.getPosition().x),\r\n                                (int)Math.floor(obj.getPosition().y),\r\n                                (int)Math.floor(obj.getPosition().z)\r\n                        );\r\n                        BlockPos local = hit.getBlockPos().subtract(base);\r\n\r\n                        // attach into the physics object\r\n                        obj.addBlock(local, toPlace, null);\r\n\r\n                        // consume one item if not in creative\r\n                        if (!player.isCreative()) {\r\n                            player.getStackInHand(hand).decrement(1);\r\n                        }\r\n                        return ActionResult.SUCCESS;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ActionResult.PASS;\r\n        });\r\n        createRecipes();\r\n\r\n\r\n    }\r\n    public void createRecipes() {\r\n        LibyRecipeRegistry.addRecipe(\r\n                new LibyShapelessCraftingRecipe(\r\n                        Identifier.of(MOD_ID, \"wood_top_planks\"),\r\n                        new LibyIngredient[]{\r\n                                LibyIngredient.createItem(ModBlocks.REDWOOD_LOGS)\r\n                        },\r\n                        ModBlocks.REDWOOD_PLANKS.liby$getId(),\r\n                        4\r\n                )\r\n        );\r\n    }\r\n    private ActionResult onUseBlock(\r\n            PlayerEntity player,\r\n            World world,\r\n            Hand hand,\r\n            BlockHitResult hit\r\n    ) {\r\n        if (world.isClient) return ActionResult.PASS;\r\n\r\n        // Find any collider one block out in the clicked direction\r\n        BlockPos clicked = hit.getBlockPos();\r\n        Direction face = hit.getSide();\r\n        Box checkBox = new Box(clicked.offset(face));\r\n        var list = world.getEntitiesByClass(BlockColliderEntity.class, checkBox, e -> true);\r\n        if (list.isEmpty()) return ActionResult.PASS;\r\n\r\n        return interceptPlacement(player, hand, world, list.get(0), face, clicked);\r\n    }\r\n\r\n    private ActionResult onUseEntity(\r\n            PlayerEntity player,\r\n            World world,\r\n            Hand hand,\r\n            net.minecraft.entity.Entity entity,\r\n            EntityHitResult hitResult\r\n    ) {\r\n        if (world.isClient) return ActionResult.PASS;\r\n        if (!(entity instanceof BlockColliderEntity collider)) return ActionResult.PASS;\r\n        if (hitResult == null) return ActionResult.PASS;\r\n\r\n        // Determine which face was clicked via the hit vector\r\n        Vec3d hitPos = hitResult.getPos();\r\n        Direction face = getClickedFace(collider.calculateBoundingBox(), hitPos);\r\n        BlockPos basePos = collider.getBlockPos();\r\n\r\n        return interceptPlacement(player, hand, world, collider, face, basePos);\r\n    }\r\n\r\n    private ActionResult interceptPlacement(\r\n            PlayerEntity player,\r\n            Hand hand,\r\n            World world,\r\n            BlockColliderEntity collider,\r\n            Direction face,\r\n            BlockPos basePos\r\n    ) {\r\n        ItemStack stack = player.getStackInHand(hand);\r\n        if (!(stack.getItem() instanceof BlockItem bi)) return ActionResult.PASS;\r\n\r\n        BlockState toPlace = bi.getBlock().getDefaultState();\r\n        BlockPos placePos = basePos.offset(face);\r\n\r\n        onBlockPlacementIntercepted(toPlace, placePos, player, world);\r\n        return ActionResult.SUCCESS;\r\n    }\r\n\r\n    private void onBlockPlacementIntercepted(\r\n            BlockState state,\r\n            BlockPos pos,\r\n            PlayerEntity player,\r\n            World world\r\n    ) {\r\n        // Your custom logic here:\r\n        System.out.println(\"Intercepted placement of \"\r\n                + state.getBlock().getTranslationKey()\r\n                + \" at \" + pos\r\n        );\r\n    }\r\n\r\n    private static Direction getClickedFace(Box box, Vec3d hitVec) {\r\n        double x = hitVec.x, y = hitVec.y, z = hitVec.z;\r\n        double dxMin = Math.abs(x - box.minX), dxMax = Math.abs(x - box.maxX);\r\n        double dyMin = Math.abs(y - box.minY), dyMax = Math.abs(y - box.maxY);\r\n        double dzMin = Math.abs(z - box.minZ), dzMax = Math.abs(z - box.maxZ);\r\n\r\n        double min = dxMin; Direction face = Direction.WEST;\r\n        if (dxMax < min) { min = dxMax; face = Direction.EAST; }\r\n        if (dyMin < min) { min = dyMin; face = Direction.DOWN; }\r\n        if (dyMax < min) { min = dyMax; face = Direction.UP; }\r\n        if (dzMin < min) { min = dzMin; face = Direction.NORTH; }\r\n        if (dzMax < min) { face = Direction.SOUTH; }\r\n        return face;\r\n    }\r\n\r\n\r\n    public static Identifier id(String name){\r\n        return Identifier.of(MOD_ID, name);\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java b/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java
--- a/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java	(date 1749300184000)
@@ -8,10 +8,14 @@
 import nazario.liby.api.registry.runtime.recipe.LibyRecipeRegistry;
 import nazario.liby.api.registry.runtime.recipe.types.LibyShapelessCraftingRecipe;
 import net.fabricmc.api.ModInitializer;
+import net.fabricmc.fabric.api.client.networking.v1.ClientPlayNetworking;
 import net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;
 import net.fabricmc.fabric.api.event.lifecycle.v1.ServerTickEvents;
 import net.fabricmc.fabric.api.event.player.UseBlockCallback;
 import net.fabricmc.fabric.api.event.player.UseEntityCallback;
+import net.fabricmc.fabric.api.networking.v1.PacketByteBufs;
+import net.fabricmc.fabric.api.networking.v1.PacketSender;
+import net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.entity.Entity;
@@ -21,9 +25,12 @@
 import net.minecraft.item.ItemPlacementContext;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.ItemUsageContext;
+import net.minecraft.network.PacketByteBuf;
 import net.minecraft.registry.Registries;
 import net.minecraft.registry.Registry;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.command.ServerCommandSource;
+import net.minecraft.server.network.ServerPlayNetworkHandler;
 import net.minecraft.server.network.ServerPlayerEntity;
 import net.minecraft.sound.SoundEvent;
 import net.minecraft.util.ActionResult;
@@ -48,6 +55,9 @@
 import org.slf4j.LoggerFactory;
 import org.copycraftDev.new_horizons.Lidar.LidarSystem;
 
+import java.util.*;
+
+
 public class NewHorizonsMain implements ModInitializer {
 
     public static final String MOD_ID = "new_horizons";
@@ -66,7 +76,6 @@
     public void onInitialize() {
 
 
-
         LidarSystem.ENTITY_COLOR_OVERRIDES.put(
                 EntityType.ZOMBIE,
                 new LidarSystem.ColorInfo(0.0f, 1.0f, 1.0f, 1f)              // 50% chance to reveal
Index: src/main/resources/new_horizons.mixins.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"required\": true,\r\n  \"minVersion\": \"0.8\",\r\n  \"package\": \"org.copycraftDev.new_horizons.mixin\",\r\n  \"compatibilityLevel\": \"JAVA_21\",\r\n  \"mixins\": [\r\n    \"AbstractBlockCollisionMixin\",\r\n    \"AbstractBlockMixin\",\r\n    \"client.SpaceSkyboxMixin\"\r\n  ],\r\n  \"client\": [\r\n    \"CameraAccessor\",\r\n    \"CameraRotationMixin\",\r\n    \"ClientPlayNetworkHandlerMixin\",\r\n    \"NoCloudsMixin\",\r\n    \"NoVoidDamageInSpaceLivingEntityMixin\",\r\n    \"LazuliPostProcessingRegistryMixin\",\r\n    \"TitleScreenMixin\",\r\n    \"client.CameraMixin\",\r\n    \"client.FreezeInventoryMixin\",\r\n    \"client.FrustumMixin\",\r\n    \"client.GameRendererMixin\",\r\n    \"client.InstantDimensionClientMixin\",\r\n    \"client.InstantDimensionNetworkMixin\",\r\n    \"client.PlayerFreezeMixin\"\r\n  ],\r\n  \"injectors\": {\r\n    \"defaultRequire\": 1\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/new_horizons.mixins.json b/src/main/resources/new_horizons.mixins.json
--- a/src/main/resources/new_horizons.mixins.json	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/resources/new_horizons.mixins.json	(date 1749152078000)
@@ -6,22 +6,28 @@
   "mixins": [
     "AbstractBlockCollisionMixin",
     "AbstractBlockMixin",
+    "client.MixinVeil",
+    "client.PlayerScreenHandlerMixin",
     "client.SpaceSkyboxMixin"
   ],
   "client": [
     "CameraAccessor",
     "CameraRotationMixin",
     "ClientPlayNetworkHandlerMixin",
+    "LazuliPostProcessingRegistryMixin",
     "NoCloudsMixin",
     "NoVoidDamageInSpaceLivingEntityMixin",
-    "LazuliPostProcessingRegistryMixin",
     "TitleScreenMixin",
     "client.CameraMixin",
     "client.FreezeInventoryMixin",
     "client.FrustumMixin",
     "client.GameRendererMixin",
+    "client.HandledScreenAccessor",
     "client.InstantDimensionClientMixin",
     "client.InstantDimensionNetworkMixin",
+    "client.InventoryScreenButtonMixin",
+    "client.InventoryScreenMixin",
+    "client.MixinVeil",
     "client.PlayerFreezeMixin"
   ],
   "injectors": {
Index: .idea/runConfigurations/Minecraft_Server.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"ProjectRunConfigurationManager\">\r\n  <configuration default=\"false\" factoryName=\"Application\" name=\"Minecraft Server\" type=\"Application\">\r\n    \r\n    <option name=\"MAIN_CLASS_NAME\" value=\"net.fabricmc.devlaunchinjector.Main\"/>\r\n    <module name=\"New-Horizons.main\"/>\r\n    <option name=\"PROGRAM_PARAMETERS\" value=\"nogui\"/>\r\n    <shortenClasspath name=\"ARGS_FILE\"/>\r\n    <option name=\"VM_PARAMETERS\" value=\"-Dfabric.dli.config=D:\\codemc\\New-Horizons\\.gradle\\loom-cache\\launch.cfg -Dfabric.dli.env=server -Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotServer\"/>\r\n    <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/run/\"/>\r\n    <method v=\"2\">\r\n      <option enabled=\"true\" name=\"Make\"/>\r\n    </method>\r\n  <classpathModifications><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpclient\\4.5.13\\e5f6cae5ca7ecaac1ec2827a9e2d65ae2869cada\\httpclient-4.5.13.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpcore\\4.4.16\\51cf043c87253c9f58b539c9f7e44c8894223850\\httpcore-4.4.16.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.lwjgl\\lwjgl-jemalloc\\3.3.3\\b543467b7ff3c6920539a88ee602d34098628be5\\lwjgl-jemalloc-3.3.3.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\commons-logging\\commons-logging\\1.2\\4bfc12adfe4842bf07b657f0369c4cb522955686\\commons-logging-1.2.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.lwjgl\\lwjgl-stb\\3.3.3\\25dd6161988d7e65f71d5065c99902402ee32746\\lwjgl-stb-3.3.3.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.commons\\commons-compress\\1.26.0\\659feffdd12280201c8aacb8f7be94f9a883c824\\commons-compress-1.26.0.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.lwjgl\\lwjgl-openal\\3.3.3\\daada81ceb5fc0c291fbfdd4433cb8d9423577f2\\lwjgl-openal-3.3.3.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.lwjgl\\lwjgl\\3.3.3\\29589b5f87ed335a6c7e7ee6a5775f81f97ecb84\\lwjgl-3.3.3.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\com.mojang\\blocklist\\1.0.10\\5c685c5ffa94c4cd39496c7184c1d122e515ecef\\blocklist-1.0.10.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.lwjgl\\lwjgl-freetype\\3.3.3\\a0db6c84a8becc8ca05f9dbfa985edc348a824c7\\lwjgl-freetype-3.3.3.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\com.ibm.icu\\icu4j\\73.2\\61ad4ef7f9131fcf6d25c34b817f90d6da06c9e9\\icu4j-73.2.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\com.mojang\\text2speech\\1.17.9\\3cad216e3a7f0c19b4b394388bc9ffc446f13b14\\text2speech-1.17.9.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\com.mojang\\patchy\\2.2.10\\da05971b07cbb379d002cf7eaec6a2048211fefc\\patchy-2.2.10.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.lwjgl\\lwjgl-tinyfd\\3.3.3\\82d755ca94b102e9ca77283b9e2dc46d1b15fbe5\\lwjgl-tinyfd-3.3.3.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.jcraft\\jorbis\\0.0.17\\8872d22b293e8f5d7d56ff92be966e6dc28ebdc6\\jorbis-0.0.17.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.lwjgl\\lwjgl-glfw\\3.3.3\\efa1eb78c5ccd840e9f329717109b5e892d72f8e\\lwjgl-glfw-3.3.3.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\org.lwjgl\\lwjgl-opengl\\3.3.3\\2f6b0147078396a58979125a4c947664e98293a\\lwjgl-opengl-3.3.3.jar\"/><entry exclude=\"true\" path=\"C:\\Users\\vasta\\.gradle\\caches\\modules-2\\files-2.1\\commons-codec\\commons-codec\\1.16.0\\4e3eb3d79888d76b54e28b350915b5dc3919c9de\\commons-codec-1.16.0.jar\"/></classpathModifications></configuration>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations/Minecraft_Server.xml b/.idea/runConfigurations/Minecraft_Server.xml
--- a/.idea/runConfigurations/Minecraft_Server.xml	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/.idea/runConfigurations/Minecraft_Server.xml	(date 1749297354000)
@@ -10,5 +10,5 @@
     <method v="2">
       <option enabled="true" name="Make"/>
     </method>
-  <classpathModifications><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.apache.httpcomponents\httpclient\4.5.13\e5f6cae5ca7ecaac1ec2827a9e2d65ae2869cada\httpclient-4.5.13.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.apache.httpcomponents\httpcore\4.4.16\51cf043c87253c9f58b539c9f7e44c8894223850\httpcore-4.4.16.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-jemalloc\3.3.3\b543467b7ff3c6920539a88ee602d34098628be5\lwjgl-jemalloc-3.3.3.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\commons-logging\commons-logging\1.2\4bfc12adfe4842bf07b657f0369c4cb522955686\commons-logging-1.2.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-stb\3.3.3\25dd6161988d7e65f71d5065c99902402ee32746\lwjgl-stb-3.3.3.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.apache.commons\commons-compress\1.26.0\659feffdd12280201c8aacb8f7be94f9a883c824\commons-compress-1.26.0.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-openal\3.3.3\daada81ceb5fc0c291fbfdd4433cb8d9423577f2\lwjgl-openal-3.3.3.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl\3.3.3\29589b5f87ed335a6c7e7ee6a5775f81f97ecb84\lwjgl-3.3.3.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\com.mojang\blocklist\1.0.10\5c685c5ffa94c4cd39496c7184c1d122e515ecef\blocklist-1.0.10.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-freetype\3.3.3\a0db6c84a8becc8ca05f9dbfa985edc348a824c7\lwjgl-freetype-3.3.3.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\com.ibm.icu\icu4j\73.2\61ad4ef7f9131fcf6d25c34b817f90d6da06c9e9\icu4j-73.2.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\com.mojang\text2speech\1.17.9\3cad216e3a7f0c19b4b394388bc9ffc446f13b14\text2speech-1.17.9.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\com.mojang\patchy\2.2.10\da05971b07cbb379d002cf7eaec6a2048211fefc\patchy-2.2.10.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-tinyfd\3.3.3\82d755ca94b102e9ca77283b9e2dc46d1b15fbe5\lwjgl-tinyfd-3.3.3.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.jcraft\jorbis\0.0.17\8872d22b293e8f5d7d56ff92be966e6dc28ebdc6\jorbis-0.0.17.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-glfw\3.3.3\efa1eb78c5ccd840e9f329717109b5e892d72f8e\lwjgl-glfw-3.3.3.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-opengl\3.3.3\2f6b0147078396a58979125a4c947664e98293a\lwjgl-opengl-3.3.3.jar"/><entry exclude="true" path="C:\Users\vasta\.gradle\caches\modules-2\files-2.1\commons-codec\commons-codec\1.16.0\4e3eb3d79888d76b54e28b350915b5dc3919c9de\commons-codec-1.16.0.jar"/></classpathModifications></configuration>
+  <classpathModifications><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\com.ibm.icu\icu4j\73.2\61ad4ef7f9131fcf6d25c34b817f90d6da06c9e9\icu4j-73.2.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-opengl\3.3.3\2f6b0147078396a58979125a4c947664e98293a\lwjgl-opengl-3.3.3.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\commons-codec\commons-codec\1.16.0\4e3eb3d79888d76b54e28b350915b5dc3919c9de\commons-codec-1.16.0.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\commons-logging\commons-logging\1.2\4bfc12adfe4842bf07b657f0369c4cb522955686\commons-logging-1.2.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\com.mojang\text2speech\1.17.9\3cad216e3a7f0c19b4b394388bc9ffc446f13b14\text2speech-1.17.9.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\com.mojang\patchy\2.2.10\da05971b07cbb379d002cf7eaec6a2048211fefc\patchy-2.2.10.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-jemalloc\3.3.3\b543467b7ff3c6920539a88ee602d34098628be5\lwjgl-jemalloc-3.3.3.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-stb\3.3.3\25dd6161988d7e65f71d5065c99902402ee32746\lwjgl-stb-3.3.3.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-freetype\3.3.3\a0db6c84a8becc8ca05f9dbfa985edc348a824c7\lwjgl-freetype-3.3.3.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.jcraft\jorbis\0.0.17\8872d22b293e8f5d7d56ff92be966e6dc28ebdc6\jorbis-0.0.17.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-tinyfd\3.3.3\82d755ca94b102e9ca77283b9e2dc46d1b15fbe5\lwjgl-tinyfd-3.3.3.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-glfw\3.3.3\efa1eb78c5ccd840e9f329717109b5e892d72f8e\lwjgl-glfw-3.3.3.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\com.mojang\blocklist\1.0.10\5c685c5ffa94c4cd39496c7184c1d122e515ecef\blocklist-1.0.10.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.apache.commons\commons-compress\1.26.0\659feffdd12280201c8aacb8f7be94f9a883c824\commons-compress-1.26.0.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.apache.httpcomponents\httpclient\4.5.13\e5f6cae5ca7ecaac1ec2827a9e2d65ae2869cada\httpclient-4.5.13.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl\3.3.3\29589b5f87ed335a6c7e7ee6a5775f81f97ecb84\lwjgl-3.3.3.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.lwjgl\lwjgl-openal\3.3.3\daada81ceb5fc0c291fbfdd4433cb8d9423577f2\lwjgl-openal-3.3.3.jar"/><entry exclude="true" path="C:\Users\Merlin\.gradle\caches\modules-2\files-2.1\org.apache.httpcomponents\httpcore\4.4.16\51cf043c87253c9f58b539c9f7e44c8894223850\httpcore-4.4.16.jar"/></classpathModifications></configuration>
 </component>
\ No newline at end of file
Index: src/main/java/org/copycraftDev/new_horizons/mixin/client/PlayerFreezeMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.mixin.client;\r\n\r\nimport net.minecraft.client.MinecraftClient;\r\nimport net.minecraft.entity.player.PlayerEntity;\r\nimport org.copycraftDev.new_horizons.Lidar.FreezeControl;\r\nimport org.spongepowered.asm.mixin.Mixin;\r\nimport org.spongepowered.asm.mixin.injection.At;\r\nimport org.spongepowered.asm.mixin.injection.Inject;\r\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\r\n\r\n@Mixin(MinecraftClient.class)\r\npublic class PlayerFreezeMixin {\r\n\r\n\r\n    @Inject(method = \"handleInputEvents\", at = @At(\"HEAD\"), cancellable = true)\r\n    private void freezeInput(CallbackInfo ci) {\r\n        if (FreezeControl.isFrozen) {\r\n            ci.cancel();\r\n        }\r\n    }\r\n\r\n    @Inject(method = \"tick\", at = @At(\"HEAD\"))\r\n    private void freezePlayerMovement(CallbackInfo ci) {\r\n        if (FreezeControl.isFrozen && MinecraftClient.getInstance().player != null) {\r\n            PlayerEntity player = MinecraftClient.getInstance().player;\r\n            player.setVelocity(0, 0, 0);\r\n            player.setPitch(player.getPitch());\r\n            player.setYaw(player.getYaw());\r\n            player.forwardSpeed = 0;\r\n            player.sidewaysSpeed = 0;\r\n            player.upwardSpeed = 0;\r\n            player.headYaw = 0;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/mixin/client/PlayerFreezeMixin.java b/src/main/java/org/copycraftDev/new_horizons/mixin/client/PlayerFreezeMixin.java
--- a/src/main/java/org/copycraftDev/new_horizons/mixin/client/PlayerFreezeMixin.java	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/java/org/copycraftDev/new_horizons/mixin/client/PlayerFreezeMixin.java	(date 1749066592000)
@@ -1,6 +1,8 @@
 package org.copycraftDev.new_horizons.mixin.client;
 
 import net.minecraft.client.MinecraftClient;
+import net.minecraft.client.input.Input;
+import net.minecraft.client.option.KeyBinding;
 import net.minecraft.entity.player.PlayerEntity;
 import org.copycraftDev.new_horizons.Lidar.FreezeControl;
 import org.spongepowered.asm.mixin.Mixin;
@@ -11,25 +13,41 @@
 @Mixin(MinecraftClient.class)
 public class PlayerFreezeMixin {
 
-
     @Inject(method = "handleInputEvents", at = @At("HEAD"), cancellable = true)
     private void freezeInput(CallbackInfo ci) {
         if (FreezeControl.isFrozen) {
+            // Cancel input so player can't move or rotate via keyboard/mouse
             ci.cancel();
         }
     }
 
-    @Inject(method = "tick", at = @At("HEAD"))
+    @Inject(method = "tick", at = @At("TAIL"))
     private void freezePlayerMovement(CallbackInfo ci) {
-        if (FreezeControl.isFrozen && MinecraftClient.getInstance().player != null) {
-            PlayerEntity player = MinecraftClient.getInstance().player;
-            player.setVelocity(0, 0, 0);
-            player.setPitch(player.getPitch());
-            player.setYaw(player.getYaw());
-            player.forwardSpeed = 0;
-            player.sidewaysSpeed = 0;
-            player.upwardSpeed = 0;
-            player.headYaw = 0;
+        if (FreezeControl.isFrozen) {
+            MinecraftClient client = MinecraftClient.getInstance();
+            PlayerEntity player = client.player;
+            if (player != null) {
+                // Completely stop movement
+                player.setVelocity(0, 0, 0);
+                player.forwardSpeed = 0;
+                player.sidewaysSpeed = 0;
+                player.upwardSpeed = 0;
+                // Prevent any look movement by locking rotation to current values
+                float yaw = player.getYaw();
+                float pitch = player.getPitch();
+                player.setYaw(yaw);
+                player.setPitch(pitch);
+                player.headYaw = yaw;
+
+                // Also freeze input movement vector to zero so client input doesn't interfere
+                KeyBinding input = client.options.forwardKey.isPressed() ? client.options.forwardKey : null;
+                if (input != null) {
+                    client.player.input.movementForward = 0;
+                    client.player.input.movementSideways = 0;
+                    client.player.input.jumping = false;
+                    client.player.input.sneaking = false;
+                }
+            }
         }
     }
 }
Index: src/main/java/org/copycraftDev/new_horizons/client/NewHorizonsClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.client;\r\n\r\nimport foundry.veil.Veil;\r\nimport net.fabricmc.api.ClientModInitializer;\r\nimport net.fabricmc.fabric.api.blockrenderlayer.v1.BlockRenderLayerMap;\r\nimport net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientTickEvents;\r\nimport net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;\r\nimport net.fabricmc.fabric.api.client.particle.v1.ParticleFactoryRegistry;\r\nimport net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\r\nimport net.fabricmc.fabric.api.client.rendering.v1.EntityRendererRegistry;\r\nimport net.fabricmc.fabric.api.client.rendering.v1.WorldRenderEvents;\r\nimport net.minecraft.client.MinecraftClient;\r\nimport net.minecraft.client.gui.screen.ingame.InventoryScreen;\r\nimport net.minecraft.client.option.KeyBinding;\r\nimport net.minecraft.client.render.RenderLayer;\r\nimport net.minecraft.client.render.VertexConsumerProvider;\r\nimport net.minecraft.client.render.entity.EntityRenderer;\r\nimport net.minecraft.client.render.entity.EntityRendererFactory;\r\nimport net.minecraft.client.util.math.MatrixStack;\r\nimport net.minecraft.util.Identifier;\r\nimport net.minecraft.util.math.Vec3d;\r\nimport org.copycraftDev.new_horizons.Lidar.LidarGunScrollHandler;\r\nimport org.copycraftDev.new_horizons.Lidar.SpraypaintScrollHandler;\r\nimport org.copycraftDev.new_horizons.client.particle.ModParticlesClient;\r\nimport org.copycraftDev.new_horizons.client.rendering.CelestialBodyRenderer;\r\nimport org.copycraftDev.new_horizons.client.rendering.ModShaders;\r\nimport org.copycraftDev.new_horizons.core.bigbang.BigBangClientManager;\r\nimport org.copycraftDev.new_horizons.core.entity.BlockColliderEntity;\r\nimport org.copycraftDev.new_horizons.core.entity.ModEntities;\r\nimport org.copycraftDev.new_horizons.core.items.ModItems;\r\nimport org.copycraftDev.new_horizons.core.particle.ModParticles;\r\nimport org.copycraftDev.new_horizons.client.render.entity.SeatEntityRenderer;\r\nimport org.copycraftDev.new_horizons.lazuli_snnipets.LazuliGeometryBuilder;\r\nimport org.copycraftDev.new_horizons.core.blocks.ModBlocks;\r\nimport org.copycraftDev.new_horizons.lazuli_snnipets.LazuliRenderingRegistry;\r\nimport org.copycraftDev.new_horizons.physics.PhysicsMain;\r\nimport org.copycraftDev.new_horizons.physics.PhysicsRenderer;\r\nimport org.lwjgl.glfw.GLFW;\r\n\r\nimport java.util.Collection;\r\n\r\npublic class NewHorizonsClient implements ClientModInitializer {\r\n    private static float currentTickDelta = 0.0F;\r\n    static double speed = 0;\r\n    static Vec3d direction = Vec3d.ZERO;\r\n    static Vec3d speed3d = Vec3d.ZERO;\r\n    public static boolean controlling = false;\r\n\r\n    public static KeyBinding ARROW_UP;\r\n    public static KeyBinding ARROW_DOWN;\r\n    public static KeyBinding ARROW_LEFT;\r\n    public static KeyBinding ARROW_RIGHT;\r\n    public static KeyBinding FRONT;\r\n    public static KeyBinding RIGHT;\r\n    public static KeyBinding BACK;\r\n    public static KeyBinding LEFT;\r\n    public static KeyBinding YAW_L;\r\n    public static KeyBinding YAW_R;\r\n    public static KeyBinding UP;\r\n    public static KeyBinding DOWN;\r\n    public static KeyBinding PITCH_UP;\r\n    public static KeyBinding PITCH_DOWN;\r\n    public static KeyBinding ROLL_LEFT;\r\n    public static KeyBinding ROLL_RIGHT;\r\n\r\n    private static Vec3d movementDirection = Vec3d.ZERO;\r\n\r\n    public static void setControlling(boolean x) {\r\n        controlling = x;\r\n    }\r\n\r\n    public static boolean getControlling() {\r\n        return controlling;\r\n    }\r\n\r\n    @Override\r\n    public void onInitializeClient() {\r\n        ShaderController.loadShader(ModShaders.VOID);\r\n\r\n        BuiltinItemRendererRegistry.INSTANCE.register(ModItems.SPRAYPAINT, new SprayPaintRenderer());\r\n\r\n        SpraypaintScrollHandler handler2 = new SpraypaintScrollHandler();\r\n        handler2.onInitializeClient();\r\n\r\n        LidarGunScrollHandler handler = new LidarGunScrollHandler();\r\n        handler.onInitializeClient();\r\n\r\n        registerKeyBindings();\r\n\r\n        Veil.init();\r\n        PhysicsRenderer.register();\r\n        PhysicsRenderer.register();\r\n\r\n        CelestialBodyRenderer.register();\r\n        LazuliRenderingRegistry.registerLazuliRenderPhases();\r\n\r\n        ClientTickEvents.END_CLIENT_TICK.register(client -> {\r\n            if (client.player == null) return;\r\n            if (controlling) {\r\n                if (client.options.dropKey.isPressed()) {\r\n                    client.options.dropKey.setPressed(false);\r\n                }\r\n                if (client.options.inventoryKey.isPressed()) {\r\n                    client.options.inventoryKey.setPressed(false);\r\n                }\r\n                if (client.currentScreen instanceof InventoryScreen) {\r\n                    client.setScreen(null);\r\n                }\r\n            }\r\n        });\r\n\r\n        BlockRenderLayerMap.INSTANCE.putBlock(ModBlocks.PRIVACY_GLASS, RenderLayer.getTranslucent());\r\n\r\n        ClientTickEvents.END_CLIENT_TICK.register(client -> {\r\n            BigBangClientManager.tick(client.world);\r\n        });\r\n\r\n        ParticleFactoryRegistry.getInstance().register(ModParticles.FOG_PARTICLE, ModParticlesClient.FogParticle.Factory::new);\r\n        EntityRendererRegistry.register(ModEntities.SEAT_ENTITY, SeatEntityRenderer::new);\r\n\r\n        WorldRenderEvents.BEFORE_ENTITIES.register(context -> {\r\n            MinecraftClient client = MinecraftClient.getInstance();\r\n            if (client.player == null || !controlling) return;\r\n\r\n            var player = client.player;\r\n            if (player.hasVehicle()) {\r\n                double playerPitch = Math.toRadians(player.getYaw());\r\n                double playerYaw = -Math.toRadians(player.getPitch());\r\n                LazuliGeometryBuilder.setRenderingSpaceDir(playerPitch, 0, playerYaw);\r\n            }\r\n\r\n            Vec3d inputVec = Vec3d.ZERO;\r\n            Vec3d rotationInput = Vec3d.ZERO;\r\n\r\n            if (FRONT.isPressed()) inputVec = inputVec.add(0, 0, 1);\r\n            if (BACK.isPressed()) inputVec = inputVec.add(0, 0, -1);\r\n            if (RIGHT.isPressed()) inputVec = inputVec.add(1, 0, 0);\r\n            if (LEFT.isPressed()) inputVec = inputVec.add(-1, 0, 0);\r\n            if (UP.isPressed()) inputVec = inputVec.add(0, 1, 0);\r\n            if (DOWN.isPressed()) inputVec = inputVec.add(0, -1, 0);\r\n\r\n            if (YAW_L.isPressed()) rotationInput = rotationInput.add(0, 1, 0);\r\n            if (YAW_R.isPressed()) rotationInput = rotationInput.add(0, -1, 0);\r\n            if (PITCH_UP.isPressed()) rotationInput = rotationInput.add(1, 0, 0);\r\n            if (PITCH_DOWN.isPressed()) rotationInput = rotationInput.add(-1, 0, 0);\r\n            if (ROLL_LEFT.isPressed()) rotationInput = rotationInput.add(0, 0, 1);\r\n            if (ROLL_RIGHT.isPressed()) rotationInput = rotationInput.add(0, 0, -1);\r\n\r\n            if (inputVec.lengthSquared() > 0) {\r\n                inputVec = inputVec.normalize();\r\n                speed += (0.5 - speed) * 0.005;\r\n                speed3d = speed3d.add(inputVec.multiply(0.005));\r\n            } else {\r\n                speed *= 0.98;\r\n                speed3d = speed3d.multiply(0.96);\r\n            }\r\n\r\n            double maxSpeed = 0.2;\r\n            if (speed3d.length() > maxSpeed) {\r\n                speed3d = speed3d.normalize().multiply(maxSpeed);\r\n            }\r\n\r\n            movementDirection = inputVec;\r\n            Vec3d displacement = speed3d;\r\n            LazuliGeometryBuilder.rotatedSpaceDisplaceRenderingSpacePos(displacement);\r\n\r\n            Collection<PhysicsMain.PhysicsObject> allObjects = PhysicsMain.PHYSICS_MANAGER.getAllObjects();\r\n            if (!allObjects.isEmpty()) {\r\n                PhysicsMain.PhysicsObject activeShip = allObjects.iterator().next();\r\n                activeShip.addVelocity(displacement);\r\n                if (rotationInput.lengthSquared() > 0) {\r\n                    activeShip.addRotation(rotationInput.multiply(0.5));\r\n                }\r\n            }\r\n        });\r\n\r\n        EntityRendererRegistry.register(ModEntities.BLOCK_COLLIDER,\r\n                ctx -> new EntityRenderer<BlockColliderEntity>(ctx) {\r\n                    @Override\r\n                    public void render(BlockColliderEntity entity, float yaw, float tickDelta,\r\n                                       MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light) {}\r\n                    @Override\r\n                    public Identifier getTexture(BlockColliderEntity entity) { return null; }\r\n                });\r\n    }\r\n\r\n    private void registerKeyBindings() {\r\n        ARROW_UP = new KeyBinding(\"key.new_horizons.arrow_up\", GLFW.GLFW_KEY_UP, \"category.new_horizons\");\r\n        ARROW_DOWN = new KeyBinding(\"key.new_horizons.arrow_down\", GLFW.GLFW_KEY_DOWN, \"category.new_horizons\");\r\n        ARROW_LEFT = new KeyBinding(\"key.new_horizons.arrow_left\", GLFW.GLFW_KEY_LEFT, \"category.new_horizons\");\r\n        ARROW_RIGHT = new KeyBinding(\"key.new_horizons.arrow_right\", GLFW.GLFW_KEY_RIGHT, \"category.new_horizons\");\r\n        FRONT = new KeyBinding(\"key.new_horizons.w\", GLFW.GLFW_KEY_W, \"category.new_horizons\");\r\n        RIGHT = new KeyBinding(\"key.new_horizons.d\", GLFW.GLFW_KEY_D, \"category.new_horizons\");\r\n        BACK = new KeyBinding(\"key.new_horizons.s\", GLFW.GLFW_KEY_S, \"category.new_horizons\");\r\n        LEFT = new KeyBinding(\"key.new_horizons.a\", GLFW.GLFW_KEY_A, \"category.new_horizons\");\r\n        YAW_L = new KeyBinding(\"key.new_horizons.q\", GLFW.GLFW_KEY_Q, \"category.new_horizons\");\r\n        YAW_R = new KeyBinding(\"key.new_horizons.e\", GLFW.GLFW_KEY_E, \"category.new_horizons\");\r\n        UP = new KeyBinding(\"key.new_horizons.up\", GLFW.GLFW_KEY_KP_9, \"category.new_horizons\");\r\n        DOWN = new KeyBinding(\"key.new_horizons.down\", GLFW.GLFW_KEY_KP_3, \"category.new_horizons\");\r\n        PITCH_UP = new KeyBinding(\"key.new_horizons.pitch_up\", GLFW.GLFW_KEY_KP_8, \"category.new_horizons\");\r\n        PITCH_DOWN = new KeyBinding(\"key.new_horizons.pitch_down\", GLFW.GLFW_KEY_KP_2, \"category.new_horizons\");\r\n        ROLL_LEFT = new KeyBinding(\"key.new_horizons.roll_left\", GLFW.GLFW_KEY_KP_4, \"category.new_horizons\");\r\n        ROLL_RIGHT = new KeyBinding(\"key.new_horizons.roll_right\", GLFW.GLFW_KEY_KP_6, \"category.new_horizons\");\r\n\r\n        KeyBindingHelper.registerKeyBinding(ARROW_UP);\r\n        KeyBindingHelper.registerKeyBinding(ARROW_DOWN);\r\n        KeyBindingHelper.registerKeyBinding(ARROW_LEFT);\r\n        KeyBindingHelper.registerKeyBinding(ARROW_RIGHT);\r\n        KeyBindingHelper.registerKeyBinding(FRONT);\r\n        KeyBindingHelper.registerKeyBinding(RIGHT);\r\n        KeyBindingHelper.registerKeyBinding(BACK);\r\n        KeyBindingHelper.registerKeyBinding(LEFT);\r\n        KeyBindingHelper.registerKeyBinding(YAW_L);\r\n        KeyBindingHelper.registerKeyBinding(YAW_R);\r\n        KeyBindingHelper.registerKeyBinding(UP);\r\n        KeyBindingHelper.registerKeyBinding(DOWN);\r\n        KeyBindingHelper.registerKeyBinding(PITCH_UP);\r\n        KeyBindingHelper.registerKeyBinding(PITCH_DOWN);\r\n        KeyBindingHelper.registerKeyBinding(ROLL_LEFT);\r\n        KeyBindingHelper.registerKeyBinding(ROLL_RIGHT);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/client/NewHorizonsClient.java b/src/main/java/org/copycraftDev/new_horizons/client/NewHorizonsClient.java
--- a/src/main/java/org/copycraftDev/new_horizons/client/NewHorizonsClient.java	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/java/org/copycraftDev/new_horizons/client/NewHorizonsClient.java	(date 1749152850000)
@@ -2,22 +2,22 @@
 
 import foundry.veil.Veil;
 import net.fabricmc.api.ClientModInitializer;
-import net.fabricmc.fabric.api.blockrenderlayer.v1.BlockRenderLayerMap;
 import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientTickEvents;
+
+import net.minecraft.client.MinecraftClient;
+import net.minecraft.util.Identifier;
+import net.fabricmc.fabric.api.blockrenderlayer.v1.BlockRenderLayerMap;
 import net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;
 import net.fabricmc.fabric.api.client.particle.v1.ParticleFactoryRegistry;
 import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;
 import net.fabricmc.fabric.api.client.rendering.v1.EntityRendererRegistry;
 import net.fabricmc.fabric.api.client.rendering.v1.WorldRenderEvents;
-import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.gui.screen.ingame.InventoryScreen;
 import net.minecraft.client.option.KeyBinding;
 import net.minecraft.client.render.RenderLayer;
 import net.minecraft.client.render.VertexConsumerProvider;
 import net.minecraft.client.render.entity.EntityRenderer;
-import net.minecraft.client.render.entity.EntityRendererFactory;
 import net.minecraft.client.util.math.MatrixStack;
-import net.minecraft.util.Identifier;
 import net.minecraft.util.math.Vec3d;
 import org.copycraftDev.new_horizons.Lidar.LidarGunScrollHandler;
 import org.copycraftDev.new_horizons.Lidar.SpraypaintScrollHandler;
@@ -30,6 +30,7 @@
 import org.copycraftDev.new_horizons.core.items.ModItems;
 import org.copycraftDev.new_horizons.core.particle.ModParticles;
 import org.copycraftDev.new_horizons.client.render.entity.SeatEntityRenderer;
+import org.copycraftDev.new_horizons.extrastuff.ShaderNodeEditor;
 import org.copycraftDev.new_horizons.lazuli_snnipets.LazuliGeometryBuilder;
 import org.copycraftDev.new_horizons.core.blocks.ModBlocks;
 import org.copycraftDev.new_horizons.lazuli_snnipets.LazuliRenderingRegistry;
@@ -37,7 +38,7 @@
 import org.copycraftDev.new_horizons.physics.PhysicsRenderer;
 import org.lwjgl.glfw.GLFW;
 
-import java.util.Collection;
+import java.util.*;
 
 public class NewHorizonsClient implements ClientModInitializer {
     private static float currentTickDelta = 0.0F;
@@ -73,9 +74,12 @@
         return controlling;
     }
 
+
     @Override
     public void onInitializeClient() {
-        ShaderController.loadShader(ModShaders.VOID);
+
+
+        ShaderController.loadShader(ModShaders.BLUR_PROCESSOR);
 
         BuiltinItemRendererRegistry.INSTANCE.register(ModItems.SPRAYPAINT, new SprayPaintRenderer());
 
@@ -219,4 +223,6 @@
         KeyBindingHelper.registerKeyBinding(ROLL_LEFT);
         KeyBindingHelper.registerKeyBinding(ROLL_RIGHT);
     }
+
 }
+
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22\" default=\"true\" project-jdk-name=\"22\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/.idea/misc.xml	(date 1749066672000)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="temurin-21" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: .gradle/loom-cache/launch.cfg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>commonProperties\r\n\tfabric.development=true\r\n\tfabric.remapClasspathFile=C:\\Users\\vasta\\Desktop\\Moddev\\New-Horizons\\.gradle\\loom-cache\\remapClasspath.txt\r\n\tlog4j.configurationFile=C:\\Users\\vasta\\Desktop\\Moddev\\New-Horizons\\.gradle\\loom-cache\\log4j.xml\r\n\tlog4j2.formatMsgNoLookups=true\r\n\tfabric.log.disableAnsi=false\r\nclientArgs\r\n\t--assetIndex\r\n\t1.21.1-17\r\n\t--assetsDir\r\n\tC:\\Users\\vasta\\.gradle\\caches\\fabric-loom\\assets
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gradle/loom-cache/launch.cfg b/.gradle/loom-cache/launch.cfg
--- a/.gradle/loom-cache/launch.cfg	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/.gradle/loom-cache/launch.cfg	(date 1749297354000)
@@ -1,11 +1,11 @@
 commonProperties
 	fabric.development=true
-	fabric.remapClasspathFile=C:\Users\vasta\Desktop\Moddev\New-Horizons\.gradle\loom-cache\remapClasspath.txt
-	log4j.configurationFile=C:\Users\vasta\Desktop\Moddev\New-Horizons\.gradle\loom-cache\log4j.xml
+	fabric.remapClasspathFile=D:\codemc\New-Horizons\.gradle\loom-cache\remapClasspath.txt
+	log4j.configurationFile=D:\codemc\New-Horizons\.gradle\loom-cache\log4j.xml
 	log4j2.formatMsgNoLookups=true
 	fabric.log.disableAnsi=false
 clientArgs
 	--assetIndex
 	1.21.1-17
 	--assetsDir
-	C:\Users\vasta\.gradle\caches\fabric-loom\assets
\ No newline at end of file
+	C:\Users\Merlin\.gradle\caches\fabric-loom\assets
\ No newline at end of file
Index: src/main/java/org/copycraftDev/new_horizons/core/blocks/ModBlocks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.core.blocks;\r\n\r\nimport nazario.liby.api.registry.auto.LibyAutoRegister;\r\nimport net.fabricmc.fabric.api.itemgroup.v1.ItemGroupEvents;\r\nimport net.minecraft.block.Block;\r\nimport net.minecraft.block.AbstractBlock;\r\nimport net.minecraft.item.BlockItem;\r\nimport net.minecraft.item.Item;\r\nimport net.minecraft.item.ItemGroup;\r\nimport net.minecraft.registry.Registries;\r\nimport net.minecraft.registry.Registry;\r\nimport net.minecraft.registry.RegistryKey;\r\nimport net.minecraft.util.Identifier;\r\nimport org.copycraftDev.new_horizons.NewHorizonsMain;\r\nimport org.copycraftDev.new_horizons.core.blocks.custom.*;\r\nimport org.copycraftDev.new_horizons.physics.block.AssemblerBlock;\r\n\r\n@LibyAutoRegister(method = \"initialize\")\r\npublic class ModBlocks {\r\n    private ModBlocks() {}\r\n\r\n    // Instances of our new blocks\r\n    public static final Block CAPTAINS_CHAIR = register(\"captains_chair\", new CaptainsChairBlock(AbstractBlock.Settings.create()));\r\n    public static final Block GOLD_LAMP = register(\"gold_lamp\", new GoldLampBlock());\r\n    public static final Block GOLD_TILE_LAMP = register(\"gold_tile_lamp\", new GoldTileLampBlock());\r\n    public static final Block GOLD_FLOWER_LAMP = register(\"gold_flower_lamp\", new GoldFlowerLampBlock());\r\n    public static final Block PRIVACY_GLASS = register(\"privacy_glass\", new PrivacyGlassBlock());\r\n    public static final Block ASSEMBLER_BLOCK = register(\"assembler_block\", new AssemblerBlock());\r\n\r\n    public static final Block REDWOOD_LOGS = register(\"redwood_logs\", new WoodBlock());\r\n    public static final Block REDWOOD_PLANKS = register(\"redwood_planks\", new WoodBlock());\r\n    public static final Block REDWOOD_LOG_STRIPPED = register(\"redwood_logs_stripped\", new WoodBlock());\r\n\r\n    public static final Block LIDAR_SCANNER = register(\"lidar_scanner_block\", new LidarScannerBlock());\r\n\r\n    private static Block register(String path, Block block) {\r\n        Identifier id = Identifier.of(NewHorizonsMain.MOD_ID, path);\r\n        // register the Block\r\n        Registry.register(Registries.BLOCK, id, block);\r\n        // register the BlockItem without grouping\r\n        Registry.register(\r\n                Registries.ITEM,\r\n                id,\r\n                new BlockItem(block, new Item.Settings())\r\n        );\r\n        return block;\r\n    }\r\n\r\n    public static void initialize() {\r\n        // Inject our blocks into the custom ItemGroup after registration\r\n        Identifier groupId = Identifier.of(NewHorizonsMain.MOD_ID, \"new_horizons_group\");\r\n        RegistryKey<ItemGroup> groupKey = RegistryKey.of(Registries.ITEM_GROUP.getKey(), groupId);\r\n        ItemGroupEvents.modifyEntriesEvent(groupKey).register(entries -> {\r\n            entries.add(CAPTAINS_CHAIR.asItem());\r\n            entries.add(GOLD_LAMP.asItem());\r\n            entries.add(GOLD_TILE_LAMP.asItem());\r\n            entries.add(GOLD_FLOWER_LAMP.asItem());\r\n            entries.add(PRIVACY_GLASS.asItem());\r\n            entries.add(REDWOOD_LOGS.asItem());\r\n            entries.add(REDWOOD_PLANKS.asItem());\r\n            entries.add(REDWOOD_LOG_STRIPPED.asItem());\r\n            entries.add(ASSEMBLER_BLOCK.asItem());\r\n            entries.add(LIDAR_SCANNER.asItem());\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/core/blocks/ModBlocks.java b/src/main/java/org/copycraftDev/new_horizons/core/blocks/ModBlocks.java
--- a/src/main/java/org/copycraftDev/new_horizons/core/blocks/ModBlocks.java	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/java/org/copycraftDev/new_horizons/core/blocks/ModBlocks.java	(date 1749219094000)
@@ -27,6 +27,7 @@
     public static final Block PRIVACY_GLASS = register("privacy_glass", new PrivacyGlassBlock());
     public static final Block ASSEMBLER_BLOCK = register("assembler_block", new AssemblerBlock());
 
+
     public static final Block REDWOOD_LOGS = register("redwood_logs", new WoodBlock());
     public static final Block REDWOOD_PLANKS = register("redwood_planks", new WoodBlock());
     public static final Block REDWOOD_LOG_STRIPPED = register("redwood_logs_stripped", new WoodBlock());
Index: src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.client.planets;\r\n\r\nimport net.minecraft.util.Identifier;\r\nimport net.minecraft.util.math.Vec3d;\r\nimport org.copycraftDev.new_horizons.NewHorizonsMain;\r\nimport org.copycraftDev.new_horizons.extrastuff.PlanetTextureGenerator;\r\nimport org.copycraftDev.new_horizons.extrastuff.TextureResizer;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CelestialBodyRegistry {\r\n    private static final Map<Identifier, CelestialBodyData> REGISTERED_PLANETS = new HashMap<>();\r\n\r\n    static {\r\n        registerDefaults();\r\n    }\r\n\r\n\r\n    public static void reloadPlanets() {\r\n        REGISTERED_PLANETS.clear();\r\n        registerDefaults();\r\n        System.out.println(\"\uD83D\uDD04 Reloaded all planets\");\r\n    }\r\n\r\n\r\n    private static void registerDefaults() {\r\n        register(createSun());\r\n        register(createMercury());\r\n        register(createVenus());\r\n        register(createEarth());\r\n        register(createMars());\r\n        register(createJupiter());\r\n        register(createSaturn());\r\n        register(createUranus());\r\n        register(createNeptune());\r\n    }\r\n\r\n    private static CelestialBodyData createSun() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Sun\";\r\n        p.center = new Vec3d(0, 100, 0);\r\n        p.radius = 140;\r\n        p.rotationSpeed = 0.001;\r\n        p.orbitSpeed = 0.0;\r\n        p.hasAtmosphere = false;\r\n        p.atmosphereColor = null;\r\n        p.isStar = true;\r\n        p.atmosphereRadius = 150;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath = \"textures/test_textures/8k_sun.jpg\";\r\n        p.heightMapPath       = \"textures/test_textures/sun_height_map.png\";\r\n        p.normalMapPath       = \"textures/test_textures/sun_normal_map.png\";\r\n        p.normalMapIntensity = 0.5F;\r\n        p.heightMapIntensity = 0.5F;\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createMercury() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Mercury\";\r\n        p.center = new Vec3d(0, 100, -390);\r\n        p.radius = 50;\r\n        p.rotationSpeed = 0.0000512;\r\n        p.orbitSpeed = 0.00833;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = false;\r\n        p.atmosphereColor = null;\r\n        p.atmosphereRadius = 0;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_mercury.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/mercury_height_map.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/mercury_normal_map.jpg\";\r\n        p.normalMapIntensity = 1.5F;\r\n        p.heightMapIntensity = 1F;\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createVenus() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Venus\";\r\n        p.center = new Vec3d(10, 100, -720);\r\n        p.radius = 80;\r\n        p.rotationSpeed = 0.000123;\r\n        p.orbitSpeed = 0.00323;\r\n        p.isStar = false;\r\n        p.hasAtmosphere = true;\r\n        p.atmosphereColor = new int[]{255, 180, 80, 80};\r\n        p.atmosphereRadius = 90;\r\n        p.atmosphereTexturePath = \"textures/test_textures/8k_earth_clouds.jpg\";\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_venus_surface.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/venus_height_map.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/venus_normal_map.jpg\";\r\n        p.darkAlbedoMapPath     = \"textures/test_textures/8k_venus_surface.jpg\";\r\n        p.normalMapIntensity = 0.7F;\r\n        p.heightMapIntensity = 2F;\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createEarth() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Earth\";\r\n        p.center = new Vec3d(20, 100, -1000);\r\n        p.radius = 100;\r\n        p.rotationSpeed = 0.003;\r\n        p.orbitSpeed = 0.002;\r\n        p.hasAtmosphere = true;\r\n        p.isStar = false;\r\n        p.atmosphereColor = new int[]{20, 30, 255, 70};\r\n        p.atmosphereRadius = 110;\r\n        p.hasDarkAlbedoMap = true;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath    = \"textures/test_textures/earth_texture.png\";\r\n        p.atmosphereTexturePath = \"textures/test_textures/8k_earth_clouds.jpg\";\r\n        p.darkAlbedoMapPath     = \"textures/test_textures/earth_night.png\";\r\n        p.heightMapPath         = \"textures/test_textures/earth_height.png\";\r\n        p.normalMapPath         = \"textures/test_textures/earth_normal.png\";\r\n        p.normalMapIntensity = 0.3F;\r\n        p.heightMapIntensity = 0.5F;\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createMars() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Mars\";\r\n        p.center = new Vec3d(30, 100, -1520);\r\n        p.radius = 80;\r\n        p.rotationSpeed = 0.00291;\r\n        p.orbitSpeed = 0.00106;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = false;\r\n        p.atmosphereColor = new int[]{255, 30, 0, 70};\r\n        p.atmosphereRadius = 90;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_mars.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/mars_height.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/mars_normal.jpg\";\r\n        p.normalMapIntensity = 0.5F;\r\n        p.heightMapIntensity = 0.2F;\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createJupiter() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Jupiter\";\r\n        p.center = new Vec3d(40, 100, -5200);\r\n        p.radius = 110;\r\n        p.rotationSpeed = 0.00732;\r\n        p.orbitSpeed = 0.000169;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = true;\r\n        p.atmosphereColor = null;\r\n        p.atmosphereRadius = 115;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_jupiter.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/jupiter_height.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/jupitertest.jpg\";\r\n        p.normalMapIntensity = 0.5F;\r\n        p.heightMapIntensity = 0.5F;\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createSaturn() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Saturn\";\r\n        p.center = new Vec3d(50, 100, -9540);\r\n        p.radius = 110;\r\n        p.rotationSpeed = 0.00667;\r\n        p.orbitSpeed = 0.0000679;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = true;\r\n        p.atmosphereColor = null;\r\n        p.atmosphereRadius = 115;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath    = \"textures/test_textures/8k_saturn.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/saturn_height_map.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/saturn_normal_map.jpg\";\r\n        p.ringsTexturePath      = \"textures/test_textures/saturn_ring.jpg\";\r\n        p.ringsInnerRadius      = 100;\r\n        p.ringsOuterRadius      = 100;\r\n        p.normalMapIntensity = 0.5F;\r\n        p.heightMapIntensity = 0.5F;\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createUranus() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Uranus\";\r\n        p.center = new Vec3d(50, 100, -19200);\r\n        p.radius = 120;\r\n        p.rotationSpeed = 0.00417;\r\n        p.orbitSpeed = 0.0000238;\r\n        p.hasAtmosphere = false;\r\n        p.isStar = true;\r\n        p.atmosphereColor = null;\r\n        p.atmosphereRadius = 0;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath    = \"textures/test_textures/2k_uranus.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/earth_height.png\";\r\n        p.normalMapPath         = \"textures/test_textures/earth_normal.png\";\r\n        p.normalMapIntensity = 0.5F;\r\n        p.heightMapIntensity = 0.5F;\r\n\r\n        return p;\r\n    }\r\n\r\n    private static CelestialBodyData createNeptune() {\r\n        CelestialBodyData p = new CelestialBodyData();\r\n        p.name = \"Neptune\";\r\n        p.center = new Vec3d(60, 100, -30006);\r\n        p.radius = 130;\r\n        p.rotationSpeed = 0.00448;\r\n        p.orbitSpeed = 0.0000121;\r\n        p.hasAtmosphere = true;\r\n        p.isStar = true;\r\n        p.atmosphereColor = new int[]{20, 30, 255, 70};\r\n        p.atmosphereRadius = 135;\r\n        p.hasDarkAlbedoMap = false;\r\n        p.usesGeneratedTexture = false;\r\n        p.surfaceTexturePath    = \"textures/test_textures/2k_neptune.jpg\";\r\n        p.heightMapPath         = \"textures/test_textures/neptune_height.jpg\";\r\n        p.normalMapPath         = \"textures/test_textures/neptune_normal.jpg\";\r\n        p.normalMapIntensity = 0.5F;\r\n        p.heightMapIntensity = 0.5F;\r\n\r\n        return p;\r\n    }\r\n\r\n    private static void register(CelestialBodyData planet) {\r\n        String key = planet.name.toLowerCase();\r\n\r\n        if (planet.usesGeneratedTexture) {\r\n            String genDir = \"assets/\" + NewHorizonsMain.MOD_ID + \"/textures/generated/\" + key;\r\n            File d = new File(genDir);\r\n            if (!d.exists() && !d.mkdirs()) {\r\n                System.err.println(\"Cannot create \" + genDir);\r\n            }\r\n            PlanetTextureGenerator gen = new PlanetTextureGenerator.Builder()\r\n                    .size(2048)\r\n                    .seed(123456L)\r\n                    .octaves(5)\r\n                    .frequency(3f)\r\n                    .build();\r\n            gen.generateAndRegister(NewHorizonsMain.MOD_ID, key);\r\n\r\n            planet.surfaceTexture = NewHorizonsMain.id(\"textures/generated/\" + key + \"/\" + key + \"_albedo.png\");\r\n            planet.heightMap      = NewHorizonsMain.id(\"textures/generated/\" + key + \"/\" + key + \"_height.png\");\r\n            planet.normalMap      = NewHorizonsMain.id(\"textures/generated/\" + key + \"/\" + key + \"_normal.png\");\r\n\r\n            planet.surfaceTexture = TextureResizer.resizeTexture(\r\n                    NewHorizonsMain.MOD_ID,\r\n                    \"textures/generated/\" + key + \"/\" + key + \"_albedo.png\",\r\n                    4096,2048, key + \"_alb_resized\", false\r\n            );\r\n            planet.heightMap = TextureResizer.resizeTexture(\r\n                    NewHorizonsMain.MOD_ID,\r\n                    \"textures/generated/\" + key + \"/\" + key + \"_height.png\",\r\n                    4096,2048, key + \"_hgt_resized\", false\r\n            );\r\n            planet.normalMap = TextureResizer.resizeTexture(\r\n                    NewHorizonsMain.MOD_ID,\r\n                    \"textures/generated/\" + key + \"/\" + key + \"_normal.png\",\r\n                    4096,2048, key + \"_nrm_resized\", false\r\n            );\r\n        } else {\r\n            planet.surfaceTexture    = planet.surfaceTexturePath    != null ? NewHorizonsMain.id(planet.surfaceTexturePath)    : null;\r\n            planet.cloudsTexture     = planet.cloudsTexturePath     != null ? NewHorizonsMain.id(planet.cloudsTexturePath)     : null;\r\n            planet.atmosphereTexture = planet.atmosphereTexturePath != null ? NewHorizonsMain.id(planet.atmosphereTexturePath) : null;\r\n            planet.darkAlbedoMap     = planet.darkAlbedoMapPath     != null ? NewHorizonsMain.id(planet.darkAlbedoMapPath)     : null;\r\n            planet.heightMap         = planet.heightMapPath         != null ? NewHorizonsMain.id(planet.heightMapPath)         : null;\r\n            planet.normalMap         = planet.normalMapPath         != null ? NewHorizonsMain.id(planet.normalMapPath)         : null;\r\n        }\r\n\r\n        // handle rings if present\r\n        if (planet.ringsTexturePath != null) {\r\n            planet.ringsTexture = NewHorizonsMain.id(planet.ringsTexturePath);\r\n        }\r\n\r\n        REGISTERED_PLANETS.put(NewHorizonsMain.id(key), planet);\r\n        System.out.println(\"✅ Registered planet \" + planet.name);\r\n    }\r\n\r\n    public static CelestialBodyData getPlanet(Identifier id) {\r\n        return REGISTERED_PLANETS.get(id);\r\n    }\r\n\r\n    public static Map<Identifier,CelestialBodyData> getAllPlanets() {\r\n        return REGISTERED_PLANETS;\r\n    }\r\n\r\n    public static double getOrbitAngle(CelestialBodyData data, double worldTime, double partialTick) {\r\n        return (worldTime + partialTick) * data.orbitSpeed;\r\n    }\r\n\r\n    public static float getRotationAngle(CelestialBodyData data, double worldTime, double partialTick) {\r\n        double angle = (worldTime + partialTick) * data.rotationSpeed;\r\n        return (float)(angle % 360.0);\r\n    }\r\n\r\n    public static Vec3d getPlanetLocation(CelestialBodyData data, double worldTime, double partialTick) {\r\n        double θ = getOrbitAngle(data, worldTime, partialTick);\r\n        double r = data.center.length();\r\n        double x = data.center.x + r * Math.cos(θ);\r\n        double z = data.center.z + r * Math.sin(θ);\r\n        double y = data.center.y;\r\n        return new Vec3d(x, y, z);\r\n    }\r\n\r\n    public static class CelestialBodyData {\r\n        public String name;\r\n        public Vec3d center;\r\n        public double radius;\r\n        public double rotationSpeed;\r\n\r\n        public transient Identifier surfaceTexture;\r\n        public transient Identifier cloudsTexture;\r\n        public transient Identifier atmosphereTexture;\r\n        public transient Identifier darkAlbedoMap;\r\n        public transient Identifier heightMap;\r\n        public transient Identifier normalMap;\r\n\r\n\r\n        public transient Identifier ringsTexture;\r\n        public float ringsInnerRadius;\r\n        public float ringsOuterRadius;\r\n\r\n        public double orbitSpeed;\r\n        public boolean hasAtmosphere;\r\n        public boolean isStar;\r\n        public int[] atmosphereColor;\r\n        public double atmosphereRadius;\r\n        public boolean hasDarkAlbedoMap;\r\n        String surfaceTexturePath, cloudsTexturePath, atmosphereTexturePath;\r\n        String darkAlbedoMapPath, normalMapPath, heightMapPath;\r\n        String ringsTexturePath;\r\n        public boolean usesGeneratedTexture;\r\n\r\n        public float heightMapIntensity;\r\n        public float normalMapIntensity;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java b/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java
--- a/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java	(date 1749066592000)
@@ -44,18 +44,27 @@
         p.radius = 140;
         p.rotationSpeed = 0.001;
         p.orbitSpeed = 0.0;
-        p.hasAtmosphere = false;
-        p.atmosphereColor = null;
+
+
+        p.hasAtmosphere = true;
+        p.atmosphereColor  = new int[]{255, 200, 100, 30};
+        p.atmosphereRadius = 154;
+
         p.isStar = true;
-        p.atmosphereRadius = 150;
-        p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = false;
-        p.surfaceTexturePath = "textures/test_textures/8k_sun.jpg";
-        p.heightMapPath       = "textures/test_textures/sun_height_map.png";
-        p.normalMapPath       = "textures/test_textures/sun_normal_map.png";
-        p.normalMapIntensity = 0.5F;
-        p.heightMapIntensity = 0.5F;
+
+
+        p.seed = 1894723L;
+
+
+        p.usesGeneratedTexture     = false;
+        p.surfaceTexturePath       = "textures/test_textures/8k_sun.jpg";
+        p.heightMapPath            = "textures/test_textures/sun_height_map.png";
+        p.normalMapPath            = "textures/test_textures/sun_normal_map.png";
 
+        p.hasDarkAlbedoMap         = false;
+
+        p.heightMapIntensity       = 1.0f;
+        p.normalMapIntensity       = 1.0f;
         return p;
     }
 
@@ -66,18 +75,22 @@
         p.radius = 50;
         p.rotationSpeed = 0.0000512;
         p.orbitSpeed = 0.00833;
-        p.hasAtmosphere = false;
+
+
+        p.hasAtmosphere = true;
+        p.atmosphereColor  = new int[]{200, 200, 200, 10};
+        p.atmosphereRadius = 55;
+
         p.isStar = false;
-        p.atmosphereColor = null;
-        p.atmosphereRadius = 0;
-        p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = false;
-        p.surfaceTexturePath    = "textures/test_textures/8k_mercury.jpg";
-        p.heightMapPath         = "textures/test_textures/mercury_height_map.jpg";
-        p.normalMapPath         = "textures/test_textures/mercury_normal_map.jpg";
-        p.normalMapIntensity = 1.5F;
-        p.heightMapIntensity = 1F;
+        p.seed = 2938475L;
+        p.usesGeneratedTexture     = false;
+        p.surfaceTexturePath       = "textures/test_textures/8k_mercury.jpg";
+        p.heightMapPath            = "textures/test_textures/mercury_height_map.jpg";
+        p.normalMapPath            = "textures/test_textures/mercury_normal_map.jpg";
+        p.hasDarkAlbedoMap         = false;
 
+        p.heightMapIntensity       = 1.0f;
+        p.normalMapIntensity       = 1.0f;
         return p;
     }
 
@@ -86,22 +99,24 @@
         p.name = "Venus";
         p.center = new Vec3d(10, 100, -720);
         p.radius = 80;
-        p.rotationSpeed = 0.000123;
+        p.rotationSpeed = 0.0000123;
         p.orbitSpeed = 0.00323;
-        p.isStar = false;
+
+
         p.hasAtmosphere = true;
-        p.atmosphereColor = new int[]{255, 180, 80, 80};
-        p.atmosphereRadius = 90;
-        p.atmosphereTexturePath = "textures/test_textures/8k_earth_clouds.jpg";
-        p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = false;
-        p.surfaceTexturePath    = "textures/test_textures/8k_venus_surface.jpg";
-        p.heightMapPath         = "textures/test_textures/venus_height_map.jpg";
-        p.normalMapPath         = "textures/test_textures/venus_normal_map.jpg";
-        p.darkAlbedoMapPath     = "textures/test_textures/8k_venus_surface.jpg";
-        p.normalMapIntensity = 0.7F;
-        p.heightMapIntensity = 2F;
+        p.atmosphereColor  = new int[]{255, 243, 181, 80};
+        p.atmosphereRadius = 88;
+
+        p.isStar = false;
+        p.seed = 3847561L;
+        p.usesGeneratedTexture     = false;
+        p.surfaceTexturePath       = "textures/test_textures/8k_venus_surface.jpg";
+        p.heightMapPath            = "textures/test_textures/venus_height_map.jpg";
+        p.normalMapPath            = "textures/test_textures/venus_normal_map.jpg";
+        p.hasDarkAlbedoMap         = false;
 
+        p.heightMapIntensity       = 1.0f;
+        p.normalMapIntensity       = 1.0f;
         return p;
     }
 
@@ -112,20 +127,24 @@
         p.radius = 100;
         p.rotationSpeed = 0.003;
         p.orbitSpeed = 0.002;
+
+
         p.hasAtmosphere = true;
+        p.atmosphereColor  = new int[]{20, 30, 255, 50};
+        p.atmosphereRadius = 110;
+
         p.isStar = false;
-        p.atmosphereColor = new int[]{20, 30, 255, 70};
-        p.atmosphereRadius = 110;
-        p.hasDarkAlbedoMap = true;
-        p.usesGeneratedTexture = false;
-        p.surfaceTexturePath    = "textures/test_textures/earth_texture.png";
-        p.atmosphereTexturePath = "textures/test_textures/8k_earth_clouds.jpg";
-        p.darkAlbedoMapPath     = "textures/test_textures/earth_night.png";
-        p.heightMapPath         = "textures/test_textures/earth_height.png";
-        p.normalMapPath         = "textures/test_textures/earth_normal.png";
-        p.normalMapIntensity = 0.3F;
-        p.heightMapIntensity = 0.5F;
+        p.seed = 4758291L;
+        p.usesGeneratedTexture     = false;
+        p.surfaceTexturePath       = "textures/test_textures/earth_texture.png";
+        p.atmosphereTexturePath    = "textures/test_textures/8k_earth_clouds.jpg";
+        p.darkAlbedoMapPath        = "textures/test_textures/earth_night.png";
+        p.heightMapPath            = "textures/test_textures/earth_height.png";
+        p.normalMapPath            = "textures/test_textures/earth_normal.png";
+        p.hasDarkAlbedoMap         = true;
 
+        p.heightMapIntensity       = 1.0f;
+        p.normalMapIntensity       = 1.0f;
         return p;
     }
 
@@ -136,18 +155,22 @@
         p.radius = 80;
         p.rotationSpeed = 0.00291;
         p.orbitSpeed = 0.00106;
-        p.hasAtmosphere = false;
+
+
+        p.hasAtmosphere = true;
+        p.atmosphereColor  = new int[]{255, 200, 160, 50};
+        p.atmosphereRadius = 88;
+
         p.isStar = false;
-        p.atmosphereColor = new int[]{255, 30, 0, 70};
-        p.atmosphereRadius = 90;
-        p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = false;
-        p.surfaceTexturePath    = "textures/test_textures/8k_mars.jpg";
-        p.heightMapPath         = "textures/test_textures/mars_height.jpg";
-        p.normalMapPath         = "textures/test_textures/mars_normal.jpg";
-        p.normalMapIntensity = 0.5F;
-        p.heightMapIntensity = 0.2F;
+        p.seed = 5928374L;
+        p.usesGeneratedTexture     = false;
+        p.surfaceTexturePath       = "textures/test_textures/8k_mars.jpg";
+        p.heightMapPath            = "textures/test_textures/mars_height.jpg";
+        p.normalMapPath            = "textures/test_textures/mars_normal.jpg";
+        p.hasDarkAlbedoMap         = false;
 
+        p.heightMapIntensity       = 1.0f;
+        p.normalMapIntensity       = 1.0f;
         return p;
     }
 
@@ -158,18 +181,22 @@
         p.radius = 110;
         p.rotationSpeed = 0.00732;
         p.orbitSpeed = 0.000169;
+
+
         p.hasAtmosphere = false;
+        p.atmosphereColor  = new int[]{255, 210, 180, 60};
+        p.atmosphereRadius = 121;
+
         p.isStar = true;
-        p.atmosphereColor = null;
-        p.atmosphereRadius = 115;
-        p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = false;
-        p.surfaceTexturePath    = "textures/test_textures/8k_jupiter.jpg";
-        p.heightMapPath         = "textures/test_textures/jupiter_height.jpg";
-        p.normalMapPath         = "textures/test_textures/jupitertest.jpg";
-        p.normalMapIntensity = 0.5F;
-        p.heightMapIntensity = 0.5F;
+        p.seed = 6839201L;
+        p.usesGeneratedTexture     = false;
+        p.surfaceTexturePath       = "textures/test_textures/8k_jupiter.jpg";
+        p.heightMapPath            = "textures/test_textures/jupiter_height.jpg";
+        p.normalMapPath            = "textures/test_textures/jupitertest.jpg";
+        p.hasDarkAlbedoMap         = false;
 
+        p.heightMapIntensity       = 1.0f;
+        p.normalMapIntensity       = 1.0f;
         return p;
     }
 
@@ -180,21 +207,25 @@
         p.radius = 110;
         p.rotationSpeed = 0.00667;
         p.orbitSpeed = 0.0000679;
-        p.hasAtmosphere = false;
+
+
+        p.hasAtmosphere = true;
+        p.atmosphereColor  = new int[]{240, 230, 200, 50};
+        p.atmosphereRadius = 121;
+
         p.isStar = true;
-        p.atmosphereColor = null;
-        p.atmosphereRadius = 115;
-        p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = false;
-        p.surfaceTexturePath    = "textures/test_textures/8k_saturn.jpg";
-        p.heightMapPath         = "textures/test_textures/saturn_height_map.jpg";
-        p.normalMapPath         = "textures/test_textures/saturn_normal_map.jpg";
-        p.ringsTexturePath      = "textures/test_textures/saturn_ring.jpg";
-        p.ringsInnerRadius      = 100;
-        p.ringsOuterRadius      = 100;
-        p.normalMapIntensity = 0.5F;
-        p.heightMapIntensity = 0.5F;
+        p.seed = 7946218L;
+        p.usesGeneratedTexture     = false;
+        p.surfaceTexturePath       = "textures/test_textures/8k_saturn.jpg";
+        p.heightMapPath            = "textures/test_textures/saturn_height_map.jpg";
+        p.normalMapPath            = "textures/test_textures/saturn_normal_map.jpg";
+        p.ringsTexturePath         = "textures/test_textures/saturn_ring.jpg";
+        p.ringsInnerRadius         = 100;
+        p.ringsOuterRadius         = 100;
+        p.hasDarkAlbedoMap         = false;
 
+        p.heightMapIntensity       = 1.0f;
+        p.normalMapIntensity       = 1.0f;
         return p;
     }
 
@@ -205,18 +236,22 @@
         p.radius = 120;
         p.rotationSpeed = 0.00417;
         p.orbitSpeed = 0.0000238;
-        p.hasAtmosphere = false;
+
+
+        p.hasAtmosphere = true;
+        p.atmosphereColor  = new int[]{180, 255, 255, 50};
+        p.atmosphereRadius = 132;
+
         p.isStar = true;
-        p.atmosphereColor = null;
-        p.atmosphereRadius = 0;
-        p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = false;
-        p.surfaceTexturePath    = "textures/test_textures/2k_uranus.jpg";
-        p.heightMapPath         = "textures/test_textures/earth_height.png";
-        p.normalMapPath         = "textures/test_textures/earth_normal.png";
-        p.normalMapIntensity = 0.5F;
-        p.heightMapIntensity = 0.5F;
+        p.seed = 8350294L;
+        p.usesGeneratedTexture     = false;
+        p.surfaceTexturePath       = "textures/test_textures/2k_uranus.jpg";
+        p.heightMapPath            = "textures/test_textures/earth_height.png";
+        p.normalMapPath            = "textures/test_textures/earth_normal.png";
+        p.hasDarkAlbedoMap         = false;
 
+        p.heightMapIntensity       = 1.0f;
+        p.normalMapIntensity       = 1.0f;
         return p;
     }
 
@@ -227,64 +262,65 @@
         p.radius = 130;
         p.rotationSpeed = 0.00448;
         p.orbitSpeed = 0.0000121;
+
+
         p.hasAtmosphere = true;
+        p.atmosphereColor  = new int[]{100, 150, 255, 50};
+        p.atmosphereRadius = 143;
+
         p.isStar = true;
-        p.atmosphereColor = new int[]{20, 30, 255, 70};
-        p.atmosphereRadius = 135;
-        p.hasDarkAlbedoMap = false;
-        p.usesGeneratedTexture = false;
-        p.surfaceTexturePath    = "textures/test_textures/2k_neptune.jpg";
-        p.heightMapPath         = "textures/test_textures/neptune_height.jpg";
-        p.normalMapPath         = "textures/test_textures/neptune_normal.jpg";
-        p.normalMapIntensity = 0.5F;
-        p.heightMapIntensity = 0.5F;
+        p.seed = 9467123L;
+        p.usesGeneratedTexture     = false;
+        p.surfaceTexturePath       = "textures/test_textures/2k_neptune.jpg";
+        p.heightMapPath            = "textures/test_textures/neptune_height.jpg";
+        p.normalMapPath            = "textures/test_textures/neptune_normal.jpg";
+        p.hasDarkAlbedoMap         = false;
 
+        p.heightMapIntensity       = 1.0f;
+        p.normalMapIntensity       = 1.0f;
         return p;
     }
 
+
     private static void register(CelestialBodyData planet) {
         String key = planet.name.toLowerCase();
+        String modId = NewHorizonsMain.MOD_ID;
 
         if (planet.usesGeneratedTexture) {
-            String genDir = "assets/" + NewHorizonsMain.MOD_ID + "/textures/generated/" + key;
-            File d = new File(genDir);
-            if (!d.exists() && !d.mkdirs()) {
-                System.err.println("Cannot create " + genDir);
-            }
+            // 1) Build & run the generator synchronously
             PlanetTextureGenerator gen = new PlanetTextureGenerator.Builder()
                     .size(2048)
-                    .seed(123456L)
+                    .seed(planet.seed)
                     .octaves(5)
                     .frequency(3f)
                     .build();
-            gen.generateAndRegister(NewHorizonsMain.MOD_ID, key);
+            gen.generateAndRegister(modId, key);
 
-            planet.surfaceTexture = NewHorizonsMain.id("textures/generated/" + key + "/" + key + "_albedo.png");
-            planet.heightMap      = NewHorizonsMain.id("textures/generated/" + key + "/" + key + "_height.png");
-            planet.normalMap      = NewHorizonsMain.id("textures/generated/" + key + "/" + key + "_normal.png");
-
-            planet.surfaceTexture = TextureResizer.resizeTexture(
-                    NewHorizonsMain.MOD_ID,
-                    "textures/generated/" + key + "/" + key + "_albedo.png",
-                    4096,2048, key + "_alb_resized", false
-            );
-            planet.heightMap = TextureResizer.resizeTexture(
-                    NewHorizonsMain.MOD_ID,
-                    "textures/generated/" + key + "/" + key + "_height.png",
-                    4096,2048, key + "_hgt_resized", false
-            );
-            planet.normalMap = TextureResizer.resizeTexture(
-                    NewHorizonsMain.MOD_ID,
-                    "textures/generated/" + key + "/" + key + "_normal.png",
-                    4096,2048, key + "_nrm_resized", false
-            );
+            // 2) Point the planet at the newly-registered runtime textures
+            //    (generator registers under textures/generated/<name>_<type>.png)
+            planet.surfaceTexture = Identifier.of(modId, "textures/generated/" + key + "_albedo.png");
+            planet.heightMap      = Identifier.of(modId, "textures/generated/" + key + "_height.png");
+            planet.normalMap      = Identifier.of(modId, "textures/generated/" + key + "_normal.png");
         } else {
-            planet.surfaceTexture    = planet.surfaceTexturePath    != null ? NewHorizonsMain.id(planet.surfaceTexturePath)    : null;
-            planet.cloudsTexture     = planet.cloudsTexturePath     != null ? NewHorizonsMain.id(planet.cloudsTexturePath)     : null;
-            planet.atmosphereTexture = planet.atmosphereTexturePath != null ? NewHorizonsMain.id(planet.atmosphereTexturePath) : null;
-            planet.darkAlbedoMap     = planet.darkAlbedoMapPath     != null ? NewHorizonsMain.id(planet.darkAlbedoMapPath)     : null;
-            planet.heightMap         = planet.heightMapPath         != null ? NewHorizonsMain.id(planet.heightMapPath)         : null;
-            planet.normalMap         = planet.normalMapPath         != null ? NewHorizonsMain.id(planet.normalMapPath)         : null;
+            // static-file branch: exactly as you had it
+            planet.surfaceTexture    = planet.surfaceTexturePath    != null
+                    ? NewHorizonsMain.id(planet.surfaceTexturePath)
+                    : null;
+            planet.cloudsTexture     = planet.cloudsTexturePath     != null
+                    ? NewHorizonsMain.id(planet.cloudsTexturePath)
+                    : null;
+            planet.atmosphereTexture = planet.atmosphereTexturePath != null
+                    ? NewHorizonsMain.id(planet.atmosphereTexturePath)
+                    : null;
+            planet.darkAlbedoMap     = planet.darkAlbedoMapPath     != null
+                    ? NewHorizonsMain.id(planet.darkAlbedoMapPath)
+                    : null;
+            planet.heightMap         = planet.heightMapPath         != null
+                    ? NewHorizonsMain.id(planet.heightMapPath)
+                    : null;
+            planet.normalMap         = planet.normalMapPath         != null
+                    ? NewHorizonsMain.id(planet.normalMapPath)
+                    : null;
         }
 
         // handle rings if present
@@ -292,9 +328,13 @@
             planet.ringsTexture = NewHorizonsMain.id(planet.ringsTexturePath);
         }
 
+        // Finally, register into our central map
         REGISTERED_PLANETS.put(NewHorizonsMain.id(key), planet);
-        System.out.println("✅ Registered planet " + planet.name);
+        System.out.println("✅ Registered planet "
+                + planet.name
+                + (planet.usesGeneratedTexture ? " (dynamic textures)" : ""));
     }
+
 
     public static CelestialBodyData getPlanet(Identifier id) {
         return REGISTERED_PLANETS.get(id);
@@ -350,8 +390,9 @@
         String darkAlbedoMapPath, normalMapPath, heightMapPath;
         String ringsTexturePath;
         public boolean usesGeneratedTexture;
+        public long seed;
 
-        public float heightMapIntensity;
         public float normalMapIntensity;
+        public float heightMapIntensity;
     }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"98d4082c-d487-4920-b26a-61a5027f7d6f\" name=\"Changes\" comment=\"chat did i cook?\">\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/file-system.probe\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/file-system.probe\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/loom-cache/launch.cfg\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/loom-cache/launch.cfg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/loom-cache/remapClasspath.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/loom-cache/remapClasspath.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/gradle.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/gradle.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/assets/new_horizons/quasar/modules/emitter/particle/test_particle.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/assets/new_horizons/quasar/modules/emitter/particle/test_particle.json\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"New-Horizons\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"New-Horizons\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"New-Horizons\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"build\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"New-Horizons\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"fabric\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"977b78050d5c9bd07ac672f2f3c8c930c23720e4\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Neomoon6153official&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/copycraft/New-Horizons.git&quot;,\r\n    &quot;accountId&quot;: &quot;d335c36b-9b77-4cd3-bf7f-b0d968f3e960&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2vxRKYpj5XnMTHcZzKud840itSN\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Minecraft Client.executor\": \"Run\",\r\n    \"Gradle.New-Horizons [:net.fabricmc.devlaunchinjector.Main.main()].executor\": \"Run\",\r\n    \"Gradle.New-Horizons [runClient].executor\": \"Run\",\r\n    \"Gradle.new-horizons [build].executor\": \"Run\",\r\n    \"Gradle.new-horizons [clean].executor\": \"Run\",\r\n    \"Gradle.new-horizons.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"D:/Coisas frequentes/GitHub/New-Horizons/src/main/resources/assets/minecraft/shaders/program\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"settings.editor.selected.configurable\": \"reference.settingsdialog.project.gradle\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Coisas frequentes\\GitHub\\New-Horizons\\src\\main\\resources\\assets\\minecraft\\shaders\\program\" />\r\n      <recent name=\"D:\\codemc\\New-Horizons\" />\r\n      <recent name=\"D:\\codemc\\New-Horizons\\src\\main\\java\\org\\copycraftDev\\new_horizons\\extrastuff\\noise\" />\r\n      <recent name=\"D:\\codemc\\New-Horizons\\src\\main\\resources\\assets\\minecraft\\textures\\gui\\sprites\\widget\" />\r\n      <recent name=\"D:\\codemc\\New-Horizons\\src\\main\\resources\\assets\\new_horizons\\sounds\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Coisas frequentes\\GitHub\\New-Horizons\\src\\main\\resources\\assets\\new_horizons\\shaders\\post\" />\r\n      <recent name=\"D:\\Coisas frequentes\\GitHub\\New-Horizons\\src\\main\\resources\\assets\\minecraft\\shaders\\program\" />\r\n      <recent name=\"D:\\Coisas frequentes\\GitHub\\New-Horizons\\src\\main\\resources\\assets\\new_horizons\\shaders\\core\" />\r\n      <recent name=\"D:\\codemc\\New-Horizons\\src\\main\\resources\\assets\\new_horizons\\sounds\" />\r\n    </key>\r\n    <key name=\"ExtractSuperBase.RECENT_KEYS\">\r\n      <recent name=\"org.copycraftDev.new_horizons.blackhole\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Gradle.New-Horizons [runClient]\">\r\n    <configuration name=\"New-Horizons [runClient]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"runClient\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"new-horizons [build]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"build\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"new-horizons [clean]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"clean\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.Minecraft Client\" />\r\n      <item itemvalue=\"Application.Minecraft Server\" />\r\n      <item itemvalue=\"Gradle.New-Horizons [runClient]\" />\r\n      <item itemvalue=\"Gradle.new-horizons [build]\" />\r\n      <item itemvalue=\"Gradle.new-horizons [clean]\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.New-Horizons [runClient]\" />\r\n        <item itemvalue=\"Gradle.new-horizons [build]\" />\r\n        <item itemvalue=\"Gradle.new-horizons [clean]\" />\r\n        <item itemvalue=\"Gradle.new-horizons [clean]\" />\r\n        <item itemvalue=\"Gradle.new-horizons [build]\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"98d4082c-d487-4920-b26a-61a5027f7d6f\" name=\"Changes\" comment=\"\" />\r\n      <created>1745084675692</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1745084675692</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"titles screen revamp, and physics engine base\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1746267679699</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1746267679699</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"titlescreen revamp part 2 XD&#10;physics improvements (not really)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1746351762247</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1746351762247</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"titlescreen revamp part 2 XD&#10;physics improvements (not really)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1746352296662</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1746352296662</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"titlescreen revamp part 2 XD&#10;physics improvements (not really)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1746352645596</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1746352645596</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"merge\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1746473174356</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1746473174356</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"stuff\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1747409259564</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1747409259564</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"stuff\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1747409306486</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1747409306486</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"stuff\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1747415853655</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1747415853655</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"stuff\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1747416124845</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1747416124845</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"stuff\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1747591594141</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1747591594142</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"stuff\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1747591756897</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1747591756897</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"12\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"titles screen revamp, and physics engine base\" />\r\n    <MESSAGE value=\"titlescreen revamp part 2 XD&#10;physics improvements (not really)\" />\r\n    <MESSAGE value=\"merge\" />\r\n    <MESSAGE value=\"Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java&#10;#&#9;src/main/java/org/copycraftDev/new_horizons/mixin/NoVoidDamageInSpaceLivingEntityMixin.java&#10;#&#9;src/main/java/org/copycraftDev/new_horizons/mixin/PanoramaConfig.java&#10;#&#9;src/main/resources/assets/new_horizons/sounds/engine_ambiance.ogg&#10;#&#9;src/main/resources/new_horizons.mixins.json\" />\r\n    <MESSAGE value=\"texture resizer util and main menu improvements\" />\r\n    <MESSAGE value=\"stuff\" />\r\n    <MESSAGE value=\"chat did i cook?\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"chat did i cook?\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/.idea/workspace.xml	(date 1749302210000)
@@ -4,15 +4,88 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="98d4082c-d487-4920-b26a-61a5027f7d6f" name="Changes" comment="chat did i cook?">
+    <list default="true" id="98d4082c-d487-4920-b26a-61a5027f7d6f" name="Changes" comment="shader magic">
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/hotreload/Acessor.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/file-system.probe" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/launch.cfg" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/launch.cfg" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapClasspath.txt" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapClasspath.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/curse/maven/cloth-config-348521/5729125/cloth-config-348521-5729125.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/curse/maven/cloth-config-348521/5729125/cloth-config-348521-5729125.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/curse/maven/fabricskyboxes-408209/5424365/fabricskyboxes-408209-5424365.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/curse/maven/fabricskyboxes-408209/5424365/fabricskyboxes-408209-5424365.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/curse/maven/music-notification-817206/5617079/music-notification-817206-5617079.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/curse/maven/music-notification-817206/5617079/music-notification-817206-5617079.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/foundry/veil/veil-fabric-1.21.1/1.0.0.206/veil-fabric-1.21.1-1.0.0.206.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/foundry/veil/veil-fabric-1.21.1/1.0.0.206/veil-fabric-1.21.1-1.0.0.206.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/cardinal-components-api/6.1.2/cardinal-components-api-6.1.2.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/cardinal-components-api/6.1.2/cardinal-components-api-6.1.2.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/liby/1.21.1-build-2.1/liby-1.21.1-build-2.1.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/liby/1.21.1-build-2.1/liby-1.21.1-build-2.1.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/lithium/mc1.21.1-0.15.0-fabric/lithium-mc1.21.1-0.15.0-fabric.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/lithium/mc1.21.1-0.15.0-fabric/lithium-mc1.21.1-0.15.0-fabric.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/modmenu/11.0.3/modmenu-11.0.3.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/modmenu/11.0.3/modmenu-11.0.3.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/sodium/mc1.21.1-0.6.9-fabric/sodium-mc1.21.1-0.6.9-fabric.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/maven/modrinth/sodium/mc1.21.1-0.6.9-fabric/sodium-mc1.21.1-0.6.9-fabric.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api-base/0.4.42+6573ed8c19/fabric-api-base-0.4.42+6573ed8c19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api-base/0.4.42+6573ed8c19/fabric-api-base-0.4.42+6573ed8c19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api-base/0.4.42+6573ed8c48/fabric-api-base-0.4.42+6573ed8c48.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api-base/0.4.42+6573ed8c48/fabric-api-base-0.4.42+6573ed8c48.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api-lookup-api-v1/1.6.64+b559734448/fabric-api-lookup-api-v1-1.6.64+b559734448.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api-lookup-api-v1/1.6.64+b559734448/fabric-api-lookup-api-v1-1.6.64+b559734448.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api-lookup-api-v1/1.6.70+b559734419/fabric-api-lookup-api-v1-1.6.70+b559734419.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api-lookup-api-v1/1.6.70+b559734419/fabric-api-lookup-api-v1-1.6.70+b559734419.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api/0.115.1+1.21.1/fabric-api-0.115.1+1.21.1.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-api/0.115.1+1.21.1/fabric-api-0.115.1+1.21.1.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-biome-api-v1/13.0.31+d527f9fd19/fabric-biome-api-v1-13.0.31+d527f9fd19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-biome-api-v1/13.0.31+d527f9fd19/fabric-biome-api-v1-13.0.31+d527f9fd19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-block-api-v1/1.0.22+0af3f5a719/fabric-block-api-v1-1.0.22+0af3f5a719.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-block-api-v1/1.0.22+0af3f5a719/fabric-block-api-v1-1.0.22+0af3f5a719.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-block-view-api-v2/1.0.10+6573ed8c19/fabric-block-view-api-v2-1.0.10+6573ed8c19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-block-view-api-v2/1.0.10+6573ed8c19/fabric-block-view-api-v2-1.0.10+6573ed8c19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-blockrenderlayer-v1/1.1.52+0af3f5a719/fabric-blockrenderlayer-v1-1.1.52+0af3f5a719.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-blockrenderlayer-v1/1.1.52+0af3f5a719/fabric-blockrenderlayer-v1-1.1.52+0af3f5a719.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-client-tags-api-v1/1.1.15+6573ed8c19/fabric-client-tags-api-v1-1.1.15+6573ed8c19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-client-tags-api-v1/1.1.15+6573ed8c19/fabric-client-tags-api-v1-1.1.15+6573ed8c19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-command-api-v1/1.2.49+f71b366f19/fabric-command-api-v1-1.2.49+f71b366f19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-command-api-v1/1.2.49+f71b366f19/fabric-command-api-v1-1.2.49+f71b366f19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-command-api-v2/2.2.28+6ced4dd919/fabric-command-api-v2-2.2.28+6ced4dd919.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-command-api-v2/2.2.28+6ced4dd919/fabric-command-api-v2-2.2.28+6ced4dd919.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-commands-v0/0.2.66+df3654b319/fabric-commands-v0-0.2.66+df3654b319.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-commands-v0/0.2.66+df3654b319/fabric-commands-v0-0.2.66+df3654b319.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-content-registries-v0/8.0.18+b559734419/fabric-content-registries-v0-8.0.18+b559734419.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-content-registries-v0/8.0.18+b559734419/fabric-content-registries-v0-8.0.18+b559734419.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-convention-tags-v1/2.1.3+7f945d5b19/fabric-convention-tags-v1-2.1.3+7f945d5b19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-convention-tags-v1/2.1.3+7f945d5b19/fabric-convention-tags-v1-2.1.3+7f945d5b19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-convention-tags-v2/2.10.0+9465b64419/fabric-convention-tags-v2-2.10.0+9465b64419.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-convention-tags-v2/2.10.0+9465b64419/fabric-convention-tags-v2-2.10.0+9465b64419.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-crash-report-info-v1/0.2.29+0af3f5a719/fabric-crash-report-info-v1-0.2.29+0af3f5a719.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-crash-report-info-v1/0.2.29+0af3f5a719/fabric-crash-report-info-v1-0.2.29+0af3f5a719.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-data-attachment-api-v1/1.4.1+9ed317f519/fabric-data-attachment-api-v1-1.4.1+9ed317f519.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-data-attachment-api-v1/1.4.1+9ed317f519/fabric-data-attachment-api-v1-1.4.1+9ed317f519.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-data-generation-api-v1/20.2.26+16c4ae2519/fabric-data-generation-api-v1-20.2.26+16c4ae2519.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-data-generation-api-v1/20.2.26+16c4ae2519/fabric-data-generation-api-v1-20.2.26+16c4ae2519.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-dimensions-v1/4.0.0+6fc22b9919/fabric-dimensions-v1-4.0.0+6fc22b9919.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-dimensions-v1/4.0.0+6fc22b9919/fabric-dimensions-v1-4.0.0+6fc22b9919.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-entity-events-v1/1.7.0+2122d82819/fabric-entity-events-v1-1.7.0+2122d82819.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-entity-events-v1/1.7.0+2122d82819/fabric-entity-events-v1-1.7.0+2122d82819.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-events-interaction-v0/0.7.13+ba9dae0619/fabric-events-interaction-v0-0.7.13+ba9dae0619.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-events-interaction-v0/0.7.13+ba9dae0619/fabric-events-interaction-v0-0.7.13+ba9dae0619.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-game-rule-api-v1/1.0.53+6ced4dd919/fabric-game-rule-api-v1-1.0.53+6ced4dd919.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-game-rule-api-v1/1.0.53+6ced4dd919/fabric-game-rule-api-v1-1.0.53+6ced4dd919.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-gametest-api-v1/2.0.5+6fc22b9919/fabric-gametest-api-v1-2.0.5+6fc22b9919.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-gametest-api-v1/2.0.5+6fc22b9919/fabric-gametest-api-v1-2.0.5+6fc22b9919.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-item-api-v1/11.1.1+d5debaed19/fabric-item-api-v1-11.1.1+d5debaed19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-item-api-v1/11.1.1+d5debaed19/fabric-item-api-v1-11.1.1+d5debaed19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-item-group-api-v1/4.1.6+6823f7cd19/fabric-item-group-api-v1-4.1.6+6823f7cd19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-item-group-api-v1/4.1.6+6823f7cd19/fabric-item-group-api-v1-4.1.6+6823f7cd19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-key-binding-api-v1/1.0.47+0af3f5a719/fabric-key-binding-api-v1-1.0.47+0af3f5a719.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-key-binding-api-v1/1.0.47+0af3f5a719/fabric-key-binding-api-v1-1.0.47+0af3f5a719.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-keybindings-v0/0.2.45+df3654b319/fabric-keybindings-v0-0.2.45+df3654b319.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-keybindings-v0/0.2.45+df3654b319/fabric-keybindings-v0-0.2.45+df3654b319.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-lifecycle-events-v1/2.3.8+0684cd1248/fabric-lifecycle-events-v1-2.3.8+0684cd1248.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-lifecycle-events-v1/2.3.8+0684cd1248/fabric-lifecycle-events-v1-2.3.8+0684cd1248.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-lifecycle-events-v1/2.5.0+01d9a51c19/fabric-lifecycle-events-v1-2.5.0+01d9a51c19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-lifecycle-events-v1/2.5.0+01d9a51c19/fabric-lifecycle-events-v1-2.5.0+01d9a51c19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-loot-api-v2/3.0.15+3f89f5a519/fabric-loot-api-v2-3.0.15+3f89f5a519.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-loot-api-v2/3.0.15+3f89f5a519/fabric-loot-api-v2-3.0.15+3f89f5a519.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-loot-api-v3/1.0.3+3f89f5a519/fabric-loot-api-v3-1.0.3+3f89f5a519.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-loot-api-v3/1.0.3+3f89f5a519/fabric-loot-api-v3-1.0.3+3f89f5a519.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-model-loading-api-v1/2.0.0+fe474d6b19/fabric-model-loading-api-v1-2.0.0+fe474d6b19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-model-loading-api-v1/2.0.0+fe474d6b19/fabric-model-loading-api-v1-2.0.0+fe474d6b19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-networking-api-v1/4.3.0+c7469b2119/fabric-networking-api-v1-4.3.0+c7469b2119.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-networking-api-v1/4.3.0+c7469b2119/fabric-networking-api-v1-4.3.0+c7469b2119.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-particles-v1/4.0.2+6573ed8c19/fabric-particles-v1-4.0.2+6573ed8c19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-particles-v1/4.0.2+6573ed8c19/fabric-particles-v1-4.0.2+6573ed8c19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-registry-sync-v0/5.2.0+34f5d91419/fabric-registry-sync-v0-5.2.0+34f5d91419.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-registry-sync-v0/5.2.0+34f5d91419/fabric-registry-sync-v0-5.2.0+34f5d91419.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-renderer-api-v1/3.4.0+c705a49c19/fabric-renderer-api-v1-3.4.0+c705a49c19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-renderer-api-v1/3.4.0+c705a49c19/fabric-renderer-api-v1-3.4.0+c705a49c19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-renderer-indigo/1.7.0+c705a49c19/fabric-renderer-indigo-1.7.0+c705a49c19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-renderer-indigo/1.7.0+c705a49c19/fabric-renderer-indigo-1.7.0+c705a49c19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-renderer-registries-v1/3.2.68+df3654b319/fabric-renderer-registries-v1-3.2.68+df3654b319.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-renderer-registries-v1/3.2.68+df3654b319/fabric-renderer-registries-v1-3.2.68+df3654b319.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-data-attachment-v1/0.3.48+73761d2e19/fabric-rendering-data-attachment-v1-0.3.48+73761d2e19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-data-attachment-v1/0.3.48+73761d2e19/fabric-rendering-data-attachment-v1-0.3.48+73761d2e19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-fluids-v1/3.1.6+1daea21519/fabric-rendering-fluids-v1-3.1.6+1daea21519.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-fluids-v1/3.1.6+1daea21519/fabric-rendering-fluids-v1-3.1.6+1daea21519.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-fluids-v1/3.1.6+b559734448/fabric-rendering-fluids-v1-3.1.6+b559734448.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-fluids-v1/3.1.6+b559734448/fabric-rendering-fluids-v1-3.1.6+b559734448.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-v0/1.1.71+df3654b319/fabric-rendering-v0-1.1.71+df3654b319.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-v0/1.1.71+df3654b319/fabric-rendering-v0-1.1.71+df3654b319.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-v1/5.0.5+df16efd019/fabric-rendering-v1-5.0.5+df16efd019.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-rendering-v1/5.0.5+df16efd019/fabric-rendering-v1-5.0.5+df16efd019.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-resource-conditions-api-v1/4.3.0+8dc279b119/fabric-resource-conditions-api-v1-4.3.0+8dc279b119.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-resource-conditions-api-v1/4.3.0+8dc279b119/fabric-resource-conditions-api-v1-4.3.0+8dc279b119.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-resource-loader-v0/1.3.1+5b5275af19/fabric-resource-loader-v0-1.3.1+5b5275af19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-resource-loader-v0/1.3.1+5b5275af19/fabric-resource-loader-v0-1.3.1+5b5275af19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-screen-api-v1/2.0.25+8b68f1c719/fabric-screen-api-v1-2.0.25+8b68f1c719.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-screen-api-v1/2.0.25+8b68f1c719/fabric-screen-api-v1-2.0.25+8b68f1c719.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-screen-handler-api-v1/1.3.88+b559734419/fabric-screen-handler-api-v1-1.3.88+b559734419.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-screen-handler-api-v1/1.3.88+b559734419/fabric-screen-handler-api-v1-1.3.88+b559734419.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-sound-api-v1/1.0.23+6573ed8c19/fabric-sound-api-v1-1.0.23+6573ed8c19.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-sound-api-v1/1.0.23+6573ed8c19/fabric-sound-api-v1-1.0.23+6573ed8c19.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-transfer-api-v1/5.1.11+b559734448/fabric-transfer-api-v1-5.1.11+b559734448.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-transfer-api-v1/5.1.11+b559734448/fabric-transfer-api-v1-5.1.11+b559734448.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-transfer-api-v1/5.4.2+c24bd99419/fabric-transfer-api-v1-5.4.2+c24bd99419.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-transfer-api-v1/5.4.2+c24bd99419/fabric-transfer-api-v1-5.4.2+c24bd99419.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-transitive-access-wideners-v1/6.2.0+45b9699719/fabric-transitive-access-wideners-v1-6.2.0+45b9699719.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/net/fabricmc/fabric-api/fabric-transitive-access-wideners-v1/6.2.0+45b9699719/fabric-transitive-access-wideners-v1-6.2.0+45b9699719.pom" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/teamreborn/energy/4.1.0/energy-4.1.0.pom" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_1_1_21_1_build_3_v2/teamreborn/energy/4.1.0/energy-4.1.0.pom" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/gradle.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/runConfigurations/Minecraft_Client.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/runConfigurations/Minecraft_Client.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/runConfigurations/Minecraft_Server.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/runConfigurations/Minecraft_Server.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/assets/new_horizons/quasar/modules/emitter/particle/test_particle.json" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/assets/new_horizons/quasar/modules/emitter/particle/test_particle.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/build.gradle" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/client/NewHorizonsClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/client/NewHorizonsClient.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/client/planets/CelestialBodyRegistry.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/core/blocks/ModBlocks.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/core/blocks/ModBlocks.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/lazuli_snnipets/LazuliRenderingRegistry.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/lazuli_snnipets/LazuliRenderingRegistry.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/mixin/TitleScreenMixin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/mixin/TitleScreenMixin.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/mixin/client/InventoryScreenMixin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/mixin/client/InventoryScreenMixin.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/mixin/client/PlayerFreezeMixin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/copycraftDev/new_horizons/mixin/client/PlayerFreezeMixin.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/fabric.mod.json" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/fabric.mod.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/new_horizons.mixins.json" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/new_horizons.mixins.json" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -76,6 +149,7 @@
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
     <option name="RESET_MODE" value="HARD" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
   &quot;lastFilter&quot;: {
@@ -86,7 +160,7 @@
   <component name="GithubPullRequestsUISettings">{
   &quot;selectedUrlAndAccountId&quot;: {
     &quot;url&quot;: &quot;https://github.com/copycraft/New-Horizons.git&quot;,
-    &quot;accountId&quot;: &quot;d335c36b-9b77-4cd3-bf7f-b0d968f3e960&quot;
+    &quot;accountId&quot;: &quot;40789803-feaf-4dbf-ba57-837fad9a29ca&quot;
   }
 }</component>
   <component name="ProblemsViewState">
@@ -102,45 +176,51 @@
   <component name="ProjectViewState">
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.Minecraft Client.executor": "Run",
-    "Gradle.New-Horizons [:net.fabricmc.devlaunchinjector.Main.main()].executor": "Run",
-    "Gradle.New-Horizons [runClient].executor": "Run",
-    "Gradle.new-horizons [build].executor": "Run",
-    "Gradle.new-horizons [clean].executor": "Run",
-    "Gradle.new-horizons.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "git-widget-placeholder": "main",
-    "ignore.virus.scanning.warn.message": "true",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "D:/Coisas frequentes/GitHub/New-Horizons/src/main/resources/assets/minecraft/shaders/program",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.0",
-    "settings.editor.selected.configurable": "reference.settingsdialog.project.gradle"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.Minecraft Client.executor&quot;: &quot;Run&quot;,
+    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
+    &quot;Gradle.New-Horizons [:net.fabricmc.devlaunchinjector.Main.main()].executor&quot;: &quot;Run&quot;,
+    &quot;Gradle.New-Horizons [runClient].executor&quot;: &quot;Run&quot;,
+    &quot;Gradle.new-horizons [build].executor&quot;: &quot;Run&quot;,
+    &quot;Gradle.new-horizons [clean].executor&quot;: &quot;Run&quot;,
+    &quot;Gradle.new-horizons.executor&quot;: &quot;Run&quot;,
+    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
+    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
+    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/codemc/New-Horizons/src/main/resources/assets/minecraft/shaders/program&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settingsdialog.project.gradle&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
-      <recent name="D:\Coisas frequentes\GitHub\New-Horizons\src\main\resources\assets\minecraft\shaders\program" />
-      <recent name="D:\codemc\New-Horizons" />
-      <recent name="D:\codemc\New-Horizons\src\main\java\org\copycraftDev\new_horizons\extrastuff\noise" />
-      <recent name="D:\codemc\New-Horizons\src\main\resources\assets\minecraft\textures\gui\sprites\widget" />
-      <recent name="D:\codemc\New-Horizons\src\main\resources\assets\new_horizons\sounds" />
+      <recent name="D:\codemc\New-Horizons\src\main\resources\assets\minecraft\shaders\program" />
+      <recent name="D:\codemc\New-Horizons\src\main\resources\assets\veil" />
+      <recent name="D:\codemc\New-Horizons\src\main\resources\assets\new_horizons\shaders\post" />
+      <recent name="D:\codemc\New-Horizons\src\main\resources\assets\new_horizons\textures\item" />
+      <recent name="D:\codemc\New-Horizons\src\main\resources\assets\minecraft\textures\gui\container" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
-      <recent name="D:\Coisas frequentes\GitHub\New-Horizons\src\main\resources\assets\new_horizons\shaders\post" />
-      <recent name="D:\Coisas frequentes\GitHub\New-Horizons\src\main\resources\assets\minecraft\shaders\program" />
-      <recent name="D:\Coisas frequentes\GitHub\New-Horizons\src\main\resources\assets\new_horizons\shaders\core" />
+      <recent name="D:\codemc\New-Horizons\src\main\resources\assets\minecraft\textures\shaders" />
+      <recent name="D:\codemc\New-Horizons\src\main\resources\assets\veil\shaders\void" />
       <recent name="D:\codemc\New-Horizons\src\main\resources\assets\new_horizons\sounds" />
     </key>
     <key name="ExtractSuperBase.RECENT_KEYS">
       <recent name="org.copycraftDev.new_horizons.blackhole" />
+    </key>
+    <key name="CopyClassDialog.RECENTS_KEY">
+      <recent name="org.copycraftDev.new_horizons.Lidar" />
     </key>
   </component>
-  <component name="RunManager" selected="Gradle.New-Horizons [runClient]">
+  <component name="RunManager" selected="Application.Minecraft Client">
     <configuration name="New-Horizons [runClient]" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
       <ExternalSystemSettings>
         <option name="executionName" />
@@ -216,9 +296,9 @@
     </list>
     <recent_temporary>
       <list>
-        <item itemvalue="Gradle.New-Horizons [runClient]" />
-        <item itemvalue="Gradle.new-horizons [build]" />
         <item itemvalue="Gradle.new-horizons [clean]" />
+        <item itemvalue="Gradle.new-horizons [build]" />
+        <item itemvalue="Gradle.New-Horizons [runClient]" />
         <item itemvalue="Gradle.new-horizons [clean]" />
         <item itemvalue="Gradle.new-horizons [build]" />
       </list>
@@ -321,7 +401,31 @@
       <option name="project" value="LOCAL" />
       <updated>1747591756897</updated>
     </task>
-    <option name="localTasksCounter" value="12" />
+    <task id="LOCAL-00012" summary="chat did i cook?">
+      <option name="closed" value="true" />
+      <created>1748735672510</created>
+      <option name="number" value="00012" />
+      <option name="presentableId" value="LOCAL-00012" />
+      <option name="project" value="LOCAL" />
+      <updated>1748735672510</updated>
+    </task>
+    <task id="LOCAL-00013" summary="lidar improvements/additions">
+      <option name="closed" value="true" />
+      <created>1748745929332</created>
+      <option name="number" value="00013" />
+      <option name="presentableId" value="LOCAL-00013" />
+      <option name="project" value="LOCAL" />
+      <updated>1748745929332</updated>
+    </task>
+    <task id="LOCAL-00014" summary="shader magic">
+      <option name="closed" value="true" />
+      <created>1749066396525</created>
+      <option name="number" value="00014" />
+      <option name="presentableId" value="LOCAL-00014" />
+      <option name="project" value="LOCAL" />
+      <updated>1749066396526</updated>
+    </task>
+    <option name="localTasksCounter" value="15" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -342,7 +446,10 @@
     <MESSAGE value="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;src/main/java/org/copycraftDev/new_horizons/NewHorizonsMain.java&#10;#&#9;src/main/java/org/copycraftDev/new_horizons/mixin/NoVoidDamageInSpaceLivingEntityMixin.java&#10;#&#9;src/main/java/org/copycraftDev/new_horizons/mixin/PanoramaConfig.java&#10;#&#9;src/main/resources/assets/new_horizons/sounds/engine_ambiance.ogg&#10;#&#9;src/main/resources/new_horizons.mixins.json" />
     <MESSAGE value="texture resizer util and main menu improvements" />
     <MESSAGE value="stuff" />
+    <MESSAGE value="lidar" />
     <MESSAGE value="chat did i cook?" />
-    <option name="LAST_COMMIT_MESSAGE" value="chat did i cook?" />
+    <MESSAGE value="lidar improvements/additions" />
+    <MESSAGE value="shader magic" />
+    <option name="LAST_COMMIT_MESSAGE" value="shader magic" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/org/copycraftDev/new_horizons/mixin/TitleScreenMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.mixin;\r\n\r\nimport net.fabricmc.api.EnvType;\r\nimport net.fabricmc.api.Environment;\r\nimport net.minecraft.client.MinecraftClient;\r\nimport net.minecraft.client.gui.DrawContext;\r\nimport net.minecraft.client.gui.screen.TitleScreen;\r\nimport net.minecraft.client.render.Camera;\r\nimport net.minecraft.text.Text;\r\nimport net.minecraft.util.Identifier;\r\nimport org.copycraftDev.new_horizons.client.rendering.CelestialBodyRendererPanorama;\r\nimport org.copycraftDev.new_horizons.extrastuff.TextureResizer;\r\nimport org.joml.Vector3f;\r\nimport org.lwjgl.glfw.GLFW;\r\nimport org.spongepowered.asm.mixin.Final;\r\nimport org.spongepowered.asm.mixin.Mixin;\r\nimport org.spongepowered.asm.mixin.Shadow;\r\nimport org.spongepowered.asm.mixin.Unique;\r\nimport org.spongepowered.asm.mixin.injection.At;\r\nimport org.spongepowered.asm.mixin.injection.Inject;\r\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\r\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n\r\nimport javax.annotation.Nullable;\r\n\r\n@Environment(EnvType.CLIENT)\r\n@Mixin(TitleScreen.class)\r\npublic abstract class TitleScreenMixin extends net.minecraft.client.gui.screen.Screen {\r\n    @Unique private boolean solarView = false, showSidebar = false;\r\n    @Unique private boolean draggingZ = false, draggingS = false, dragOrbit = false, dragPan = false;\r\n    @Unique private float targetZoom = 0.115f, smoothZoom = 0.115f;\r\n    @Unique private float targetSpeed = 1, smoothSpeed = 1;\r\n    @Unique private float panX, panY, lastX, lastY;\r\n    @Unique private float rotX = 0, rotY = 90, rotZ = 45;\r\n    @Unique private String selected = \"sun\", hovered = null;\r\n    @Unique private final int icon = 20;\r\n    @Shadow private float backgroundAlpha;\r\n    @Shadow @Final private static org.slf4j.Logger LOGGER;\r\n    @Shadow @Nullable private net.minecraft.client.gui.screen.SplashTextRenderer splashText;\r\n\r\n    @Shadow protected abstract void init();\r\n\r\n    private static Identifier splashRes = null;\r\n\r\n    protected TitleScreenMixin(Text t) { super(t); }\r\n\r\n    @Inject(method = \"init\", at = @At(\"HEAD\"))\r\n    public void onInit(CallbackInfo ci) {\r\n        selected = \"sun\";\r\n    }\r\n\r\n    @Inject(method = \"tick\", at = @At(\"HEAD\"))\r\n    public void onTick(CallbackInfo ci) {\r\n        if (!solarView) return;\r\n        if (!(selected == null)){\r\n        Camera cam = MinecraftClient.getInstance().gameRenderer.getCamera();\r\n        Vector3f tgt = CelestialBodyRendererPanorama.getPlanetLocation(selected).toVector3f();\r\n        long w = MinecraftClient.getInstance().getWindow().getHandle();\r\n        boolean left = GLFW.glfwGetMouseButton(w, GLFW.GLFW_MOUSE_BUTTON_LEFT) == GLFW.GLFW_PRESS;\r\n        boolean right = GLFW.glfwGetMouseButton(w, GLFW.GLFW_MOUSE_BUTTON_RIGHT) == GLFW.GLFW_PRESS;\r\n\r\n        // Hook zoom into camera distance: distance inversely proportional to smoothZoom\r\n        float r = 100f / smoothZoom;\r\n        float ax = (float) Math.toRadians(rotX), ay = (float) Math.toRadians(rotY);\r\n        float cx = tgt.x + r * (float) Math.cos(ax) * (float) Math.cos(ay);\r\n        float cy = tgt.y + r * (float) Math.sin(ax);\r\n        float cz = tgt.z + r * (float) Math.cos(ax) * (float) Math.sin(ay);\r\n        try {\r\n            var acc = (CameraAccessor) cam;\r\n            acc.invokeSetPos(cx, cy, cz);\r\n            acc.invokeSetRotation(rotY, rotX);\r\n        } catch (Exception e) {\r\n            LOGGER.warn(\"cam fail\", e);\r\n        }\r\n    }}\r\n\r\n    @Inject(method = \"renderBackground(Lnet/minecraft/client/gui/DrawContext;IIF)V\", at = @At(\"HEAD\"))\r\n    public void renderSolar(DrawContext ctx, int mx, int my, float d, CallbackInfo ci) {\r\n        int w = ctx.getScaledWindowWidth(), h = ctx.getScaledWindowHeight();\r\n        if (solarView) {\r\n            clearChildren();\r\n            splashText = null;\r\n        } else {\r\n            MinecraftClient client = MinecraftClient.getInstance();\r\n            init(client, w, h);\r\n\r\n            int sw = 265, sh = 66;\r\n            if (splashRes == null) {\r\n                Identifier resized = null;\r\n\r\n                // Try up to 2 times\r\n                for (int attempt = 1; attempt <= 2; attempt++) {\r\n                    try {\r\n                        resized = TextureResizer.resizeTexture(\r\n                                \"minecraft\",\r\n                                \"textures/gui/title/titlesplash.png\",\r\n                                sw, sh,\r\n                                \"ts_res\",\r\n                                false\r\n                        );\r\n                        if (resized != null) {\r\n                            break;\r\n                        }\r\n                    } catch (Exception e) {\r\n                        LOGGER.warn(\"Attempt #{} to resize splash texture failed\", attempt, e);\r\n                    }\r\n                }\r\n\r\n                if (resized != null) {\r\n                    splashRes = resized;\r\n                } else {\r\n                    LOGGER.warn(\"All resize attempts failed—using vanilla splash texture\");\r\n                    splashRes = Identifier.of(\"minecraft/textures/gui/title/titlesplash.png\");\r\n                }\r\n            }\r\n\r\n            // only draw if we have a non-null Identifier\r\n            if (splashRes != null) {\r\n                ctx.drawTexture(\r\n                        splashRes,\r\n                        w / 2 - sw / 2, 0,\r\n                        0, 0,\r\n                        sw, sh, sw, sh\r\n                );\r\n            }\r\n        }\r\n\r\n        smoothZoom  += (targetZoom  - smoothZoom ) * 0.15f;\r\n        smoothSpeed += (targetSpeed - smoothSpeed) * 0.15f;\r\n        CelestialBodyRendererPanorama.setRotationX(rotX);\r\n        CelestialBodyRendererPanorama.setRotationY(rotY);\r\n        CelestialBodyRendererPanorama.setRotationZ(rotZ);\r\n        CelestialBodyRendererPanorama.setScale(smoothZoom);\r\n        CelestialBodyRendererPanorama.setOffsetX(panX);\r\n        CelestialBodyRendererPanorama.setOffsetY(panY);\r\n        CelestialBodyRendererPanorama.setSimulationSpeed(targetSpeed);\r\n        CelestialBodyRendererPanorama.setPlanetZ(0);\r\n        CelestialBodyRendererPanorama.render(ctx, w, h, backgroundAlpha, d, solarView ? selected : null);\r\n\r\n\r\n    hovered = null;\r\n        for (var e : CelestialBodyRendererPanorama.getScreenPositions().entrySet()) {\r\n            float dx = mx - e.getValue().x, dy = my - e.getValue().y;\r\n            if (dx * dx + dy * dy < 100) { hovered = e.getKey(); break; }\r\n        }\r\n        if (hovered != null) {\r\n            var sp = CelestialBodyRendererPanorama.getScreenPositions().get(hovered);\r\n            ctx.fill((int) sp.x - 6, (int) sp.y - 6, (int) sp.x + 6, (int) sp.y + 6, 0x80FFFFFF);\r\n            int tx = mx + 8, ty = my + 8, tw = textRenderer.getWidth(hovered);\r\n            ctx.fill(tx - 2, ty - 2, tx + tw + 2, ty + 10, 0xAA000000);\r\n            ctx.drawText(textRenderer, Text.of(hovered), tx, ty, 0xFFFFFF, false);\r\n        }\r\n\r\n        if (solarView) {\r\n            ctx.drawText(textRenderer, Text.of(\"☰\"), w - icon, 5, 0xFFFFFF, false);\r\n            if (showSidebar) {\r\n                ctx.fill(w - 100, 0, w, h, 0xAA000000);\r\n                int y = 10;\r\n                for (String n : CelestialBodyRendererPanorama.getScreenPositions().keySet()) {\r\n                    ctx.drawText(textRenderer, Text.of(n), w - 95, y, 0xFFFFFF, false); y += 12;\r\n                }\r\n            }\r\n        }\r\n        int sy = h / 2 - 100, sh = 200;\r\n        ctx.fill(w / 2 - 30, h - 30, w / 2 + 30, h - 10, 0xAA000000);\r\n        ctx.drawText(textRenderer, Text.of(solarView ? \"Back\" : \"Start\"), w / 2 - 25, h - 26, 0xFFFFFF, false);\r\n        if (solarView) {\r\n            ctx.fill(w - 30, sy, w - 22, sy + sh, 0xAA333333);\r\n            ctx.fill(20, sy, 28, sy + sh, 0xAA333333);\r\n            int zy = sy + (int) ((1f - ((targetZoom - 0.01f) / 9.99f)) * (sh - 10));\r\n            int sy2 = sy + (int) ((1f - ((targetSpeed - 0.01f) / 4.99f)) * (sh - 10));\r\n            ctx.fill(w - 32, zy, w - 20, zy + 10, 0xFFAAAAAA);\r\n            ctx.fill(18, sy2, 30, sy2 + 10, 0xFF55FF55);\r\n        }\r\n    }\r\n\r\n    @Inject(method = \"renderBackground(Lnet/minecraft/client/gui/DrawContext;IIF)V\", at = @At(\"TAIL\"))\r\n    private void drag(DrawContext ctx, int mx, int my, float d, CallbackInfo ci) {\r\n        if (!solarView) return;\r\n        int w = ctx.getScaledWindowWidth(), h = ctx.getScaledWindowHeight();\r\n        int sy = h / 2 - 100, sh = 200;\r\n        boolean left = GLFW.glfwGetMouseButton(MinecraftClient.getInstance().getWindow().getHandle(), GLFW.GLFW_MOUSE_BUTTON_LEFT) == GLFW.GLFW_PRESS;\r\n        boolean right = GLFW.glfwGetMouseButton(MinecraftClient.getInstance().getWindow().getHandle(), GLFW.GLFW_MOUSE_BUTTON_RIGHT) == GLFW.GLFW_PRESS;\r\n\r\n        if (left && !draggingZ && mx >= w - 30 && mx <= w - 22 && my >= sy && my <= sy + sh) draggingZ = true;\r\n        if (left && !draggingS && mx >= 20 && mx <= 28 && my >= sy && my <= sy + sh) draggingS = true;\r\n        if (left && !dragOrbit && !draggingZ && !draggingS) dragOrbit = true;\r\n        if (right && !dragPan) dragPan = true;\r\n\r\n        if (draggingZ) { int c = Math.min(Math.max(my, sy), sy + sh - 10); float t = 1f - (c - sy) / (sh - 10f); targetZoom = 0.01f + t * 9.99f; }\r\n        if (draggingS) { int c = Math.min(Math.max(my, sy), sy + sh - 10); float t = 1f - (c - sy) / (sh - 10f); targetSpeed = 0.01f + t * 4.99f; }\r\n\r\n        float dx = mx - lastX, dy = my - lastY;\r\n        if (dragOrbit) { rotY = (rotY + dx) % 360; rotX = Math.max(-90, Math.min(90, rotX + dy)); }\r\n        if (dragPan) { panX += dx; panY += dy; }\r\n\r\n        lastX = mx; lastY = my;\r\n        if (!left) { draggingZ = draggingS = dragOrbit = false; }\r\n        if (!right) { dragPan = false; }\r\n    }\r\n\r\n    @Inject(method = \"mouseClicked\", at = @At(\"HEAD\"), cancellable = true)\r\n    private void click(double mx, double my, int btn, CallbackInfoReturnable<Boolean> cir) {\r\n        int w = width, h = height;\r\n        if (solarView) {\r\n            if (mx >= w - icon - 5 && mx <= w - 5 && my >= 5 && my <= 5 + icon) { showSidebar = !showSidebar; cir.setReturnValue(true); return; }\r\n            if (showSidebar && mx >= w - 100) {\r\n                int y = 10;\r\n                for (String n : CelestialBodyRendererPanorama.getScreenPositions().keySet()) {\r\n                    if (my >= y && my < y + 12) { selected = n; showSidebar = false; cir.setReturnValue(true); return; }\r\n                    y += 12;\r\n                }\r\n            }\r\n            if (hovered != null && btn == GLFW.GLFW_MOUSE_BUTTON_LEFT) { selected = hovered; cir.setReturnValue(true); return; }\r\n        }\r\n        if (mx >= w / 2 - 30 && mx <= w / 2 + 30 && my >= h - 30 && my <= h - 10) { solarView = !solarView; cir.setReturnValue(true); }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/mixin/TitleScreenMixin.java b/src/main/java/org/copycraftDev/new_horizons/mixin/TitleScreenMixin.java
--- a/src/main/java/org/copycraftDev/new_horizons/mixin/TitleScreenMixin.java	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/java/org/copycraftDev/new_horizons/mixin/TitleScreenMixin.java	(date 1749066592000)
@@ -52,43 +52,108 @@
     @Inject(method = "tick", at = @At("HEAD"))
     public void onTick(CallbackInfo ci) {
         if (!solarView) return;
-        if (!(selected == null)){
-        Camera cam = MinecraftClient.getInstance().gameRenderer.getCamera();
-        Vector3f tgt = CelestialBodyRendererPanorama.getPlanetLocation(selected).toVector3f();
-        long w = MinecraftClient.getInstance().getWindow().getHandle();
-        boolean left = GLFW.glfwGetMouseButton(w, GLFW.GLFW_MOUSE_BUTTON_LEFT) == GLFW.GLFW_PRESS;
-        boolean right = GLFW.glfwGetMouseButton(w, GLFW.GLFW_MOUSE_BUTTON_RIGHT) == GLFW.GLFW_PRESS;
+        if (selected != null) {
+            Camera cam = MinecraftClient.getInstance().gameRenderer.getCamera();
+            Vector3f tgt = CelestialBodyRendererPanorama.getPlanetLocation(selected).toVector3f();
+            long w = MinecraftClient.getInstance().getWindow().getHandle();
+            boolean left = GLFW.glfwGetMouseButton(w, GLFW.GLFW_MOUSE_BUTTON_LEFT) == GLFW.GLFW_PRESS;
+            boolean right = GLFW.glfwGetMouseButton(w, GLFW.GLFW_MOUSE_BUTTON_RIGHT) == GLFW.GLFW_PRESS;
 
-        // Hook zoom into camera distance: distance inversely proportional to smoothZoom
-        float r = 100f / smoothZoom;
-        float ax = (float) Math.toRadians(rotX), ay = (float) Math.toRadians(rotY);
-        float cx = tgt.x + r * (float) Math.cos(ax) * (float) Math.cos(ay);
-        float cy = tgt.y + r * (float) Math.sin(ax);
-        float cz = tgt.z + r * (float) Math.cos(ax) * (float) Math.sin(ay);
-        try {
-            var acc = (CameraAccessor) cam;
-            acc.invokeSetPos(cx, cy, cz);
-            acc.invokeSetRotation(rotY, rotX);
-        } catch (Exception e) {
-            LOGGER.warn("cam fail", e);
+            float r = 100f / smoothZoom;
+            float ax = (float) Math.toRadians(rotX), ay = (float) Math.toRadians(rotY);
+            float cx = tgt.x + r * (float) Math.cos(ax) * (float) Math.cos(ay);
+            float cy = tgt.y + r * (float) Math.sin(ax);
+            float cz = tgt.z + r * (float) Math.cos(ax) * (float) Math.sin(ay);
+            try {
+                var acc = (CameraAccessor) cam;
+                acc.invokeSetPos(cx, cy, cz);
+                acc.invokeSetRotation(rotY, rotX);
+            } catch (Exception e) {
+                LOGGER.warn("cam fail", e);
+            }
         }
-    }}
+    }
 
     @Inject(method = "renderBackground(Lnet/minecraft/client/gui/DrawContext;IIF)V", at = @At("HEAD"))
     public void renderSolar(DrawContext ctx, int mx, int my, float d, CallbackInfo ci) {
         int w = ctx.getScaledWindowWidth(), h = ctx.getScaledWindowHeight();
+
         if (solarView) {
+            // Push to undo any 500× scale from PanoramaScaleMixin
+            ctx.getMatrices().push();
+
+            // Clear vanilla buttons/text for solar view
             clearChildren();
             splashText = null;
+
+            // Update smoothing values and pass them to the renderer
+            smoothZoom  += (targetZoom  - smoothZoom ) * 0.15f;
+            smoothSpeed += (targetSpeed - smoothSpeed) * 0.15f;
+            CelestialBodyRendererPanorama.setRotationX(rotX);
+            CelestialBodyRendererPanorama.setRotationY(rotY);
+            CelestialBodyRendererPanorama.setRotationZ(rotZ);
+            CelestialBodyRendererPanorama.setScale(smoothZoom);
+            CelestialBodyRendererPanorama.setOffsetX(panX);
+            CelestialBodyRendererPanorama.setOffsetY(panY);
+            CelestialBodyRendererPanorama.setSimulationSpeed(targetSpeed);
+            CelestialBodyRendererPanorama.setPlanetZ(0);
+            CelestialBodyRendererPanorama.render(ctx, w, h, backgroundAlpha, d, selected);
+
+            // Highlight hovered planet, if any
+            hovered = null;
+            for (var e : CelestialBodyRendererPanorama.getScreenPositions().entrySet()) {
+                float dx = mx - e.getValue().x, dy = my - e.getValue().y;
+                if (dx * dx + dy * dy < 100) {
+                    hovered = e.getKey();
+                    break;
+                }
+            }
+            if (hovered != null) {
+                var sp = CelestialBodyRendererPanorama.getScreenPositions().get(hovered);
+                ctx.fill((int) sp.x - 6, (int) sp.y - 6, (int) sp.x + 6, (int) sp.y + 6, 0x80FFFFFF);
+                int tx = mx + 8, ty = my + 8, tw = textRenderer.getWidth(hovered);
+                ctx.fill(tx - 2, ty - 2, tx + tw + 2, ty + 10, 0xAA000000);
+                ctx.drawText(textRenderer, Text.of(hovered), tx, ty, 0xFFFFFF, false);
+            }
+
+            // Draw the hamburger menu and sidebar
+            ctx.drawText(textRenderer, Text.of("☰"), w - icon, 5, 0xFFFFFF, false);
+            if (showSidebar) {
+                ctx.fill(w - 100, 0, w, h, 0xAA000000);
+                int y = 10;
+                for (String n : CelestialBodyRendererPanorama.getScreenPositions().keySet()) {
+                    ctx.drawText(textRenderer, Text.of(n), w - 95, y, 0xFFFFFF, false);
+                    y += 12;
+                }
+            }
+
+            // “Back” button—centered
+            Text backTxt = Text.of("Back");
+            int backWidth = textRenderer.getWidth(backTxt);
+            int backX = w / 2 - backWidth / 2;
+            int backY = h - 26;
+            ctx.fill(w / 2 - (backWidth/2) - 5, h - 30, w / 2 + (backWidth/2) + 5, h - 10, 0xAA000000);
+            ctx.drawText(textRenderer, backTxt, backX, backY, 0xFFFFFF, false);
+
+            // Zoom/speed sliders: use smoothZoom and smoothSpeed for knob positions
+            int sySolar = h / 2 - 100, shSolar = 200;
+            ctx.fill(w - 30, sySolar, w - 22, sySolar + shSolar, 0xAA333333);
+            ctx.fill(20, sySolar, 28, sySolar + shSolar, 0xAA333333);
+            int zySolar = sySolar + (int) ((1f - ((smoothZoom - 0.01f) / 9.99f)) * (shSolar - 10));
+            int sySolarKnob = sySolar + (int) ((1f - ((smoothSpeed - 0.01f) / 4.99f)) * (shSolar - 10));
+            ctx.fill(w - 32, zySolar, w - 20, zySolar + 10, 0xFFAAAAAA);
+            ctx.fill(18, sySolarKnob, 30, sySolarKnob + 10, 0xFF55FF55);
+
+            // Pop to restore whatever was on the matrix stack before
+            ctx.getMatrices().pop();
         } else {
+            // Vanilla title‐screen rendering
             MinecraftClient client = MinecraftClient.getInstance();
             init(client, w, h);
 
             int sw = 265, sh = 66;
             if (splashRes == null) {
                 Identifier resized = null;
-
-                // Try up to 2 times
                 for (int attempt = 1; attempt <= 2; attempt++) {
                     try {
                         resized = TextureResizer.resizeTexture(
@@ -105,7 +170,6 @@
                         LOGGER.warn("Attempt #{} to resize splash texture failed", attempt, e);
                     }
                 }
-
                 if (resized != null) {
                     splashRes = resized;
                 } else {
@@ -113,8 +177,6 @@
                     splashRes = Identifier.of("minecraft/textures/gui/title/titlesplash.png");
                 }
             }
-
-            // only draw if we have a non-null Identifier
             if (splashRes != null) {
                 ctx.drawTexture(
                         splashRes,
@@ -123,54 +185,47 @@
                         sw, sh, sw, sh
                 );
             }
-        }
 
-        smoothZoom  += (targetZoom  - smoothZoom ) * 0.15f;
-        smoothSpeed += (targetSpeed - smoothSpeed) * 0.15f;
-        CelestialBodyRendererPanorama.setRotationX(rotX);
-        CelestialBodyRendererPanorama.setRotationY(rotY);
-        CelestialBodyRendererPanorama.setRotationZ(rotZ);
-        CelestialBodyRendererPanorama.setScale(smoothZoom);
-        CelestialBodyRendererPanorama.setOffsetX(panX);
-        CelestialBodyRendererPanorama.setOffsetY(panY);
-        CelestialBodyRendererPanorama.setSimulationSpeed(targetSpeed);
-        CelestialBodyRendererPanorama.setPlanetZ(0);
-        CelestialBodyRendererPanorama.render(ctx, w, h, backgroundAlpha, d, solarView ? selected : null);
+            // Update panoramic renderer (focusPlanet = null), even if not visible
+            smoothZoom  += (targetZoom  - smoothZoom ) * 0.15f;
+            smoothSpeed += (targetSpeed - smoothSpeed) * 0.15f;
+            CelestialBodyRendererPanorama.setRotationX(rotX);
+            CelestialBodyRendererPanorama.setRotationY(rotY);
+            CelestialBodyRendererPanorama.setRotationZ(rotZ);
+            CelestialBodyRendererPanorama.setScale(smoothZoom);
+            CelestialBodyRendererPanorama.setOffsetX(panX);
+            CelestialBodyRendererPanorama.setOffsetY(panY);
+            CelestialBodyRendererPanorama.setSimulationSpeed(targetSpeed);
+            CelestialBodyRendererPanorama.setPlanetZ(0);
+            CelestialBodyRendererPanorama.render(ctx, w, h, backgroundAlpha, d, null);
 
-
-    hovered = null;
-        for (var e : CelestialBodyRendererPanorama.getScreenPositions().entrySet()) {
-            float dx = mx - e.getValue().x, dy = my - e.getValue().y;
-            if (dx * dx + dy * dy < 100) { hovered = e.getKey(); break; }
-        }
-        if (hovered != null) {
-            var sp = CelestialBodyRendererPanorama.getScreenPositions().get(hovered);
-            ctx.fill((int) sp.x - 6, (int) sp.y - 6, (int) sp.x + 6, (int) sp.y + 6, 0x80FFFFFF);
-            int tx = mx + 8, ty = my + 8, tw = textRenderer.getWidth(hovered);
-            ctx.fill(tx - 2, ty - 2, tx + tw + 2, ty + 10, 0xAA000000);
-            ctx.drawText(textRenderer, Text.of(hovered), tx, ty, 0xFFFFFF, false);
-        }
+            // Highlight hovered (if any)
+            hovered = null;
+            for (var e : CelestialBodyRendererPanorama.getScreenPositions().entrySet()) {
+                float dx = mx - e.getValue().x, dy = my - e.getValue().y;
+                if (dx * dx + dy * dy < 100) {
+                    hovered = e.getKey();
+                    break;
+                }
+            }
+            if (hovered != null) {
+                var sp = CelestialBodyRendererPanorama.getScreenPositions().get(hovered);
+                ctx.fill((int) sp.x - 6, (int) sp.y - 6, (int) sp.x + 6, (int) sp.y + 6, 0x80FFFFFF);
+                int tx = mx + 8, ty = my + 8, tw = textRenderer.getWidth(hovered);
+                ctx.fill(tx - 2, ty - 2, tx + tw + 2, ty + 10, 0xAA000000);
+                ctx.drawText(textRenderer, Text.of(hovered), tx, ty, 0xFFFFFF, false);
+            }
 
-        if (solarView) {
-            ctx.drawText(textRenderer, Text.of("☰"), w - icon, 5, 0xFFFFFF, false);
-            if (showSidebar) {
-                ctx.fill(w - 100, 0, w, h, 0xAA000000);
-                int y = 10;
-                for (String n : CelestialBodyRendererPanorama.getScreenPositions().keySet()) {
-                    ctx.drawText(textRenderer, Text.of(n), w - 95, y, 0xFFFFFF, false); y += 12;
-                }
-            }
-        }
-        int sy = h / 2 - 100, sh = 200;
-        ctx.fill(w / 2 - 30, h - 30, w / 2 + 30, h - 10, 0xAA000000);
-        ctx.drawText(textRenderer, Text.of(solarView ? "Back" : "Start"), w / 2 - 25, h - 26, 0xFFFFFF, false);
-        if (solarView) {
-            ctx.fill(w - 30, sy, w - 22, sy + sh, 0xAA333333);
-            ctx.fill(20, sy, 28, sy + sh, 0xAA333333);
-            int zy = sy + (int) ((1f - ((targetZoom - 0.01f) / 9.99f)) * (sh - 10));
-            int sy2 = sy + (int) ((1f - ((targetSpeed - 0.01f) / 4.99f)) * (sh - 10));
-            ctx.fill(w - 32, zy, w - 20, zy + 10, 0xFFAAAAAA);
-            ctx.fill(18, sy2, 30, sy2 + 10, 0xFF55FF55);
+            // “Start” button—centered
+            Text startTxt = Text.of("Start");
+            int startWidth = textRenderer.getWidth(startTxt);
+            int startX = w / 2 - startWidth / 2;
+            int startY = h - 26;
+            ctx.fill(w / 2 - (startWidth/2) - 5, h - 30, w / 2 + (startWidth/2) + 5, h - 10, 0xAA000000);
+            ctx.drawText(textRenderer, startTxt, startX, startY, 0xFFFFFF, false);
+
+            // Do NOT draw sliders when not in solarView
+            // (so sliders are hidden until the “Start” button is clicked)
         }
     }
 
@@ -187,14 +242,29 @@
         if (left && !dragOrbit && !draggingZ && !draggingS) dragOrbit = true;
         if (right && !dragPan) dragPan = true;
 
-        if (draggingZ) { int c = Math.min(Math.max(my, sy), sy + sh - 10); float t = 1f - (c - sy) / (sh - 10f); targetZoom = 0.01f + t * 9.99f; }
-        if (draggingS) { int c = Math.min(Math.max(my, sy), sy + sh - 10); float t = 1f - (c - sy) / (sh - 10f); targetSpeed = 0.01f + t * 4.99f; }
+        if (draggingZ) {
+            int c = Math.min(Math.max(my, sy), sy + sh - 10);
+            float t = 1f - (c - sy) / (sh - 10f);
+            targetZoom = 0.01f + t * 9.99f;
+        }
+        if (draggingS) {
+            int c = Math.min(Math.max(my, sy), sy + sh - 10);
+            float t = 1f - (c - sy) / (sh - 10f);
+            targetSpeed = 0.01f + t * 4.99f;
+        }
 
         float dx = mx - lastX, dy = my - lastY;
-        if (dragOrbit) { rotY = (rotY + dx) % 360; rotX = Math.max(-90, Math.min(90, rotX + dy)); }
-        if (dragPan) { panX += dx; panY += dy; }
+        if (dragOrbit) {
+            rotY = (rotY + dx) % 360;
+            rotX = Math.max(-90, Math.min(90, rotX + dy));
+        }
+        if (dragPan) {
+            panX += dx;
+            panY += dy;
+        }
 
-        lastX = mx; lastY = my;
+        lastX = mx;
+        lastY = my;
         if (!left) { draggingZ = draggingS = dragOrbit = false; }
         if (!right) { dragPan = false; }
     }
@@ -202,17 +272,53 @@
     @Inject(method = "mouseClicked", at = @At("HEAD"), cancellable = true)
     private void click(double mx, double my, int btn, CallbackInfoReturnable<Boolean> cir) {
         int w = width, h = height;
+
+        // Sidebar-toggle and planet‐selection logic (unchanged)
         if (solarView) {
-            if (mx >= w - icon - 5 && mx <= w - 5 && my >= 5 && my <= 5 + icon) { showSidebar = !showSidebar; cir.setReturnValue(true); return; }
+            if (mx >= w - icon - 5 && mx <= w - 5 && my >= 5 && my <= 5 + icon) {
+                showSidebar = !showSidebar;
+                cir.setReturnValue(true);
+                return;
+            }
             if (showSidebar && mx >= w - 100) {
                 int y = 10;
                 for (String n : CelestialBodyRendererPanorama.getScreenPositions().keySet()) {
-                    if (my >= y && my < y + 12) { selected = n; showSidebar = false; cir.setReturnValue(true); return; }
+                    if (my >= y && my < y + 12) {
+                        selected = n;
+                        showSidebar = false;
+                        cir.setReturnValue(true);
+                        return;
+                    }
                     y += 12;
                 }
             }
-            if (hovered != null && btn == GLFW.GLFW_MOUSE_BUTTON_LEFT) { selected = hovered; cir.setReturnValue(true); return; }
+            if (hovered != null && btn == GLFW.GLFW_MOUSE_BUTTON_LEFT) {
+                selected = hovered;
+                cir.setReturnValue(true);
+                return;
+            }
         }
-        if (mx >= w / 2 - 30 && mx <= w / 2 + 30 && my >= h - 30 && my <= h - 10) { solarView = !solarView; cir.setReturnValue(true); }
+
+        // Toggle solarView when “Start” or “Back” button clicked
+        // —but before turning on solarView, reset any pan/zoom/rotation offsets so the system is centered
+        if (mx >= (w / 2 - textRenderer.getWidth(Text.of(solarView ? "Back" : "Start")) / 2 - 5)
+                && mx <= (w / 2 + textRenderer.getWidth(Text.of(solarView ? "Back" : "Start")) / 2 + 5)
+                && my >= h - 30 && my <= h - 10) {
+            // If we’re about to enter Solar View, clear offsets and restore defaults:
+            if (!solarView) {
+                // Reset pan/rotation/zoom to default “start‐up” values:
+                panX = 0;
+                panY = 0;
+                rotX = 0;
+                rotY = 90;
+                rotZ = 45;
+                targetZoom = 0.115f;
+                smoothZoom = 0.115f;
+                targetSpeed = 1;
+                smoothSpeed = 1;
+            }
+            solarView = !solarView;
+            cir.setReturnValue(true);
+        }
     }
 }
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"22\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/.idea/gradle.xml	(date 1749066894000)
@@ -5,7 +5,7 @@
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="22" />
+        <option name="gradleJvm" value="temurin-21" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
Index: src/main/java/org/copycraftDev/new_horizons/lazuli_snnipets/LazuliRenderingRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.copycraftDev.new_horizons.lazuli_snnipets;\r\n\r\nimport com.mojang.blaze3d.systems.RenderSystem;\r\nimport foundry.veil.api.client.render.shader.program.ShaderProgram;\r\nimport net.fabricmc.fabric.api.client.rendering.v1.WorldRenderEvents;\r\nimport net.minecraft.client.MinecraftClient;\r\nimport net.minecraft.client.gl.PostEffectProcessor;\r\nimport net.minecraft.client.render.Camera;\r\nimport net.minecraft.client.render.FogShape;\r\nimport net.minecraft.client.render.GameRenderer;\r\n\r\nimport net.minecraft.util.Identifier;\r\nimport org.copycraftDev.new_horizons.client.ShaderController;\r\nimport org.copycraftDev.new_horizons.client.rendering.ModShaders;\r\nimport org.joml.Matrix4f;\r\nimport org.joml.Matrix4d;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.CopyOnWriteArrayList;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\n\r\npublic class LazuliRenderingRegistry {\r\n\r\n    private static Camera camera;\r\n    private static Matrix4f customViewProj;\r\n    private static final List<LazuliRenderEvents.LazuliRenderCallback> CALLBACKS = new CopyOnWriteArrayList<>();\r\n    public static final AtomicReference<Float> time = new AtomicReference<>(0f);\r\n\r\n    public static final Identifier CELESTIAL_SYNC =\r\n            Identifier.of(\"new_horizons\", \"celestial_sync\");\r\n\r\n    public static void registerLazuliRenderPhases() {\r\n        WorldRenderEvents.LAST.register(context -> {\r\n            // 1) Grab camera and tickDelta\r\n            camera = context.camera();\r\n            if (camera == null) return;\r\n            float tickDelta = context.tickCounter().getTickDelta(true);\r\n            time.updateAndGet(v -> v + tickDelta);\r\n\r\n            // 2) Build a *custom* projection matrix with a huge far plane\r\n            MinecraftClient mc = MinecraftClient.getInstance();\r\n            float fov = mc.options.getFov().getValue();  // fixed: direct float value\r\n            int width = mc.getWindow().getFramebufferWidth();\r\n            int height = mc.getWindow().getFramebufferHeight();\r\n            float aspect = (float) width / (float) height;\r\n\r\n            Matrix4d projD = new Matrix4d()\r\n                    .setPerspective(Math.toRadians(fov), aspect, 0.05, 100000.0);\r\n            Matrix4f projection = convertMatrix4dToMatrix4f(projD);\r\n\r\n            // 3) Build a view matrix from the camera rotation and position\r\n            Matrix4d viewD = new Matrix4d()\r\n                    .rotate(-Math.toRadians(camera.getPitch()), 1, 0, 0)\r\n                    .rotate(-Math.toRadians(camera.getYaw()), 0, 1, 0)\r\n                    .translate(-camera.getPos().x, -camera.getPos().y, -camera.getPos().z);\r\n            Matrix4f view = convertMatrix4dToMatrix4f(viewD);\r\n\r\n            // 4) Combine into a single view-projection matrix\r\n            customViewProj = projection.mul(view, new Matrix4f());\r\n\r\n            // 5) Run your callbacks, passing them this unclipped matrix\r\n            for (LazuliRenderEvents.LazuliRenderCallback callback : CALLBACKS) {\r\n                callback.render(context, customViewProj, tickDelta);\r\n            }\r\n\r\n            // 6) Restore vanilla render state\r\n            RenderSystem.disableBlend();\r\n            RenderSystem.setShaderColor(1f, 1f, 1f, 1f);\r\n            RenderSystem.depthMask(true);\r\n            RenderSystem.setShaderFogShape(FogShape.CYLINDER);\r\n            RenderSystem.setShaderFogColor(0f, 0f, 0f);\r\n            RenderSystem.setShader(GameRenderer::getPositionColorProgram);\r\n            RenderSystem.enableDepthTest();\r\n\r\n\r\n            if (ShaderController.isEnabled()) {\r\n                PostEffectProcessor postShader = LazuliShaderRegistry.getPostProcessor(ShaderController.getShaderId());\r\n\r\n                // Set uniforms BEFORE rendering\r\n                postShader.setUniforms(\"time\", time.get());\r\n\r\n                // Then render\r\n                postShader.render(tickDelta);\r\n            }\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    /** Register a custom render callback (your planets, rings, etc.). */\r\n    public static void register(LazuliRenderEvents.LazuliRenderCallback callback) {\r\n        CALLBACKS.add(callback);\r\n    }\r\n\r\n    private static Matrix4f convertMatrix4dToMatrix4f(Matrix4d d) {\r\n        return new Matrix4f(\r\n                (float)d.m00(), (float)d.m01(), (float)d.m02(), (float)d.m03(),\r\n                (float)d.m10(), (float)d.m11(), (float)d.m12(), (float)d.m13(),\r\n                (float)d.m20(), (float)d.m21(), (float)d.m22(), (float)d.m23(),\r\n                (float)d.m30(), (float)d.m31(), (float)d.m32(), (float)d.m33()\r\n        );\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/copycraftDev/new_horizons/lazuli_snnipets/LazuliRenderingRegistry.java b/src/main/java/org/copycraftDev/new_horizons/lazuli_snnipets/LazuliRenderingRegistry.java
--- a/src/main/java/org/copycraftDev/new_horizons/lazuli_snnipets/LazuliRenderingRegistry.java	(revision 4416832400813b68c15573011231e86ed9f0fabd)
+++ b/src/main/java/org/copycraftDev/new_horizons/lazuli_snnipets/LazuliRenderingRegistry.java	(date 1749237560000)
@@ -12,6 +12,7 @@
 import net.minecraft.util.Identifier;
 import org.copycraftDev.new_horizons.client.ShaderController;
 import org.copycraftDev.new_horizons.client.rendering.ModShaders;
+import org.copycraftDev.new_horizons.extrastuff.ShaderNodeEditor;
 import org.joml.Matrix4f;
 import org.joml.Matrix4d;
 
@@ -76,11 +77,14 @@
             if (ShaderController.isEnabled()) {
                 PostEffectProcessor postShader = LazuliShaderRegistry.getPostProcessor(ShaderController.getShaderId());
 
-                // Set uniforms BEFORE rendering
                 postShader.setUniforms("time", time.get());
 
-                // Then render
-                postShader.render(tickDelta);
+                if (postShader == null){
+                    ShaderController.disable();
+                }else {
+                    postShader.render(tickDelta);
+                }
+
             }
         });
 
diff --git a/src/main/java/org/copycraftDev/new_horizons/hotreload/Acessor.java b/src/main/java/org/copycraftDev/new_horizons/hotreload/Acessor.java
new file mode 100644
